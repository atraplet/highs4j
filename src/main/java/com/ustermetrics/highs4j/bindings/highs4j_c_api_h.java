// Generated by jextract

package com.ustermetrics.highs4j.bindings;

import org.scijava.nativelib.NativeLoader;

import java.io.IOException;
import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class highs4j_c_api_h {

    highs4j_c_api_h() {
        // Should not be called directly
    }

    static {
        try {
            NativeLoader.loadLibrary("highs");
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup()
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));

    private static class Highs_lpCall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_DOUBLE,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_lpCall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_lpCall(const HighsInt num_col, const HighsInt num_row, const HighsInt num_nz, const HighsInt a_format, const HighsInt sense, const double offset, const double *col_cost, const double *col_lower, const double *col_upper, const double *row_lower, const double *row_upper, const HighsInt *a_start, const HighsInt *a_index, const double *a_value, double *col_value, double *col_dual, double *row_value, double *row_dual, HighsInt *col_basis_status, HighsInt *row_basis_status, HighsInt *model_status)
     * }
     */
    public static FunctionDescriptor Highs_lpCall$descriptor() {
        return Highs_lpCall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_lpCall(const HighsInt num_col, const HighsInt num_row, const HighsInt num_nz, const HighsInt a_format, const HighsInt sense, const double offset, const double *col_cost, const double *col_lower, const double *col_upper, const double *row_lower, const double *row_upper, const HighsInt *a_start, const HighsInt *a_index, const double *a_value, double *col_value, double *col_dual, double *row_value, double *row_dual, HighsInt *col_basis_status, HighsInt *row_basis_status, HighsInt *model_status)
     * }
     */
    public static MethodHandle Highs_lpCall$handle() {
        return Highs_lpCall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_lpCall(const HighsInt num_col, const HighsInt num_row, const HighsInt num_nz, const HighsInt a_format, const HighsInt sense, const double offset, const double *col_cost, const double *col_lower, const double *col_upper, const double *row_lower, const double *row_upper, const HighsInt *a_start, const HighsInt *a_index, const double *a_value, double *col_value, double *col_dual, double *row_value, double *row_dual, HighsInt *col_basis_status, HighsInt *row_basis_status, HighsInt *model_status)
     * }
     */
    public static MemorySegment Highs_lpCall$address() {
        return Highs_lpCall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_lpCall(const HighsInt num_col, const HighsInt num_row, const HighsInt num_nz, const HighsInt a_format, const HighsInt sense, const double offset, const double *col_cost, const double *col_lower, const double *col_upper, const double *row_lower, const double *row_upper, const HighsInt *a_start, const HighsInt *a_index, const double *a_value, double *col_value, double *col_dual, double *row_value, double *row_dual, HighsInt *col_basis_status, HighsInt *row_basis_status, HighsInt *model_status)
     * }
     */
    public static long Highs_lpCall(long num_col, long num_row, long num_nz, long a_format, long sense, double offset, MemorySegment col_cost, MemorySegment col_lower, MemorySegment col_upper, MemorySegment row_lower, MemorySegment row_upper, MemorySegment a_start, MemorySegment a_index, MemorySegment a_value, MemorySegment col_value, MemorySegment col_dual, MemorySegment row_value, MemorySegment row_dual, MemorySegment col_basis_status, MemorySegment row_basis_status, MemorySegment model_status) {
        var mh$ = Highs_lpCall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_lpCall", num_col, num_row, num_nz, a_format, sense, offset, col_cost, col_lower, col_upper, row_lower, row_upper, a_start, a_index, a_value, col_value, col_dual, row_value, row_dual, col_basis_status, row_basis_status, model_status);
            }
            return (long)mh$.invokeExact(num_col, num_row, num_nz, a_format, sense, offset, col_cost, col_lower, col_upper, row_lower, row_upper, a_start, a_index, a_value, col_value, col_dual, row_value, row_dual, col_basis_status, row_basis_status, model_status);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_mipCall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_DOUBLE,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_mipCall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_mipCall(const HighsInt num_col, const HighsInt num_row, const HighsInt num_nz, const HighsInt a_format, const HighsInt sense, const double offset, const double *col_cost, const double *col_lower, const double *col_upper, const double *row_lower, const double *row_upper, const HighsInt *a_start, const HighsInt *a_index, const double *a_value, const HighsInt *integrality, double *col_value, double *row_value, HighsInt *model_status)
     * }
     */
    public static FunctionDescriptor Highs_mipCall$descriptor() {
        return Highs_mipCall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_mipCall(const HighsInt num_col, const HighsInt num_row, const HighsInt num_nz, const HighsInt a_format, const HighsInt sense, const double offset, const double *col_cost, const double *col_lower, const double *col_upper, const double *row_lower, const double *row_upper, const HighsInt *a_start, const HighsInt *a_index, const double *a_value, const HighsInt *integrality, double *col_value, double *row_value, HighsInt *model_status)
     * }
     */
    public static MethodHandle Highs_mipCall$handle() {
        return Highs_mipCall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_mipCall(const HighsInt num_col, const HighsInt num_row, const HighsInt num_nz, const HighsInt a_format, const HighsInt sense, const double offset, const double *col_cost, const double *col_lower, const double *col_upper, const double *row_lower, const double *row_upper, const HighsInt *a_start, const HighsInt *a_index, const double *a_value, const HighsInt *integrality, double *col_value, double *row_value, HighsInt *model_status)
     * }
     */
    public static MemorySegment Highs_mipCall$address() {
        return Highs_mipCall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_mipCall(const HighsInt num_col, const HighsInt num_row, const HighsInt num_nz, const HighsInt a_format, const HighsInt sense, const double offset, const double *col_cost, const double *col_lower, const double *col_upper, const double *row_lower, const double *row_upper, const HighsInt *a_start, const HighsInt *a_index, const double *a_value, const HighsInt *integrality, double *col_value, double *row_value, HighsInt *model_status)
     * }
     */
    public static long Highs_mipCall(long num_col, long num_row, long num_nz, long a_format, long sense, double offset, MemorySegment col_cost, MemorySegment col_lower, MemorySegment col_upper, MemorySegment row_lower, MemorySegment row_upper, MemorySegment a_start, MemorySegment a_index, MemorySegment a_value, MemorySegment integrality, MemorySegment col_value, MemorySegment row_value, MemorySegment model_status) {
        var mh$ = Highs_mipCall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_mipCall", num_col, num_row, num_nz, a_format, sense, offset, col_cost, col_lower, col_upper, row_lower, row_upper, a_start, a_index, a_value, integrality, col_value, row_value, model_status);
            }
            return (long)mh$.invokeExact(num_col, num_row, num_nz, a_format, sense, offset, col_cost, col_lower, col_upper, row_lower, row_upper, a_start, a_index, a_value, integrality, col_value, row_value, model_status);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_qpCall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_DOUBLE,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_qpCall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_qpCall(const HighsInt num_col, const HighsInt num_row, const HighsInt num_nz, const HighsInt q_num_nz, const HighsInt a_format, const HighsInt q_format, const HighsInt sense, const double offset, const double *col_cost, const double *col_lower, const double *col_upper, const double *row_lower, const double *row_upper, const HighsInt *a_start, const HighsInt *a_index, const double *a_value, const HighsInt *q_start, const HighsInt *q_index, const double *q_value, double *col_value, double *col_dual, double *row_value, double *row_dual, HighsInt *col_basis_status, HighsInt *row_basis_status, HighsInt *model_status)
     * }
     */
    public static FunctionDescriptor Highs_qpCall$descriptor() {
        return Highs_qpCall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_qpCall(const HighsInt num_col, const HighsInt num_row, const HighsInt num_nz, const HighsInt q_num_nz, const HighsInt a_format, const HighsInt q_format, const HighsInt sense, const double offset, const double *col_cost, const double *col_lower, const double *col_upper, const double *row_lower, const double *row_upper, const HighsInt *a_start, const HighsInt *a_index, const double *a_value, const HighsInt *q_start, const HighsInt *q_index, const double *q_value, double *col_value, double *col_dual, double *row_value, double *row_dual, HighsInt *col_basis_status, HighsInt *row_basis_status, HighsInt *model_status)
     * }
     */
    public static MethodHandle Highs_qpCall$handle() {
        return Highs_qpCall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_qpCall(const HighsInt num_col, const HighsInt num_row, const HighsInt num_nz, const HighsInt q_num_nz, const HighsInt a_format, const HighsInt q_format, const HighsInt sense, const double offset, const double *col_cost, const double *col_lower, const double *col_upper, const double *row_lower, const double *row_upper, const HighsInt *a_start, const HighsInt *a_index, const double *a_value, const HighsInt *q_start, const HighsInt *q_index, const double *q_value, double *col_value, double *col_dual, double *row_value, double *row_dual, HighsInt *col_basis_status, HighsInt *row_basis_status, HighsInt *model_status)
     * }
     */
    public static MemorySegment Highs_qpCall$address() {
        return Highs_qpCall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_qpCall(const HighsInt num_col, const HighsInt num_row, const HighsInt num_nz, const HighsInt q_num_nz, const HighsInt a_format, const HighsInt q_format, const HighsInt sense, const double offset, const double *col_cost, const double *col_lower, const double *col_upper, const double *row_lower, const double *row_upper, const HighsInt *a_start, const HighsInt *a_index, const double *a_value, const HighsInt *q_start, const HighsInt *q_index, const double *q_value, double *col_value, double *col_dual, double *row_value, double *row_dual, HighsInt *col_basis_status, HighsInt *row_basis_status, HighsInt *model_status)
     * }
     */
    public static long Highs_qpCall(long num_col, long num_row, long num_nz, long q_num_nz, long a_format, long q_format, long sense, double offset, MemorySegment col_cost, MemorySegment col_lower, MemorySegment col_upper, MemorySegment row_lower, MemorySegment row_upper, MemorySegment a_start, MemorySegment a_index, MemorySegment a_value, MemorySegment q_start, MemorySegment q_index, MemorySegment q_value, MemorySegment col_value, MemorySegment col_dual, MemorySegment row_value, MemorySegment row_dual, MemorySegment col_basis_status, MemorySegment row_basis_status, MemorySegment model_status) {
        var mh$ = Highs_qpCall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_qpCall", num_col, num_row, num_nz, q_num_nz, a_format, q_format, sense, offset, col_cost, col_lower, col_upper, row_lower, row_upper, a_start, a_index, a_value, q_start, q_index, q_value, col_value, col_dual, row_value, row_dual, col_basis_status, row_basis_status, model_status);
            }
            return (long)mh$.invokeExact(num_col, num_row, num_nz, q_num_nz, a_format, q_format, sense, offset, col_cost, col_lower, col_upper, row_lower, row_upper, a_start, a_index, a_value, q_start, q_index, q_value, col_value, col_dual, row_value, row_dual, col_basis_status, row_basis_status, model_status);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_POINTER    );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *Highs_create()
     * }
     */
    public static FunctionDescriptor Highs_create$descriptor() {
        return Highs_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *Highs_create()
     * }
     */
    public static MethodHandle Highs_create$handle() {
        return Highs_create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *Highs_create()
     * }
     */
    public static MemorySegment Highs_create$address() {
        return Highs_create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *Highs_create()
     * }
     */
    public static MemorySegment Highs_create() {
        var mh$ = Highs_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_create");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void Highs_destroy(void *highs)
     * }
     */
    public static FunctionDescriptor Highs_destroy$descriptor() {
        return Highs_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void Highs_destroy(void *highs)
     * }
     */
    public static MethodHandle Highs_destroy$handle() {
        return Highs_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void Highs_destroy(void *highs)
     * }
     */
    public static MemorySegment Highs_destroy$address() {
        return Highs_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void Highs_destroy(void *highs)
     * }
     */
    public static void Highs_destroy(MemorySegment highs) {
        var mh$ = Highs_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_destroy", highs);
            }
            mh$.invokeExact(highs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_version {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_POINTER    );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_version");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *Highs_version()
     * }
     */
    public static FunctionDescriptor Highs_version$descriptor() {
        return Highs_version.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *Highs_version()
     * }
     */
    public static MethodHandle Highs_version$handle() {
        return Highs_version.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *Highs_version()
     * }
     */
    public static MemorySegment Highs_version$address() {
        return Highs_version.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *Highs_version()
     * }
     */
    public static MemorySegment Highs_version() {
        var mh$ = Highs_version.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_version");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_versionMajor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG    );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_versionMajor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_versionMajor()
     * }
     */
    public static FunctionDescriptor Highs_versionMajor$descriptor() {
        return Highs_versionMajor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_versionMajor()
     * }
     */
    public static MethodHandle Highs_versionMajor$handle() {
        return Highs_versionMajor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_versionMajor()
     * }
     */
    public static MemorySegment Highs_versionMajor$address() {
        return Highs_versionMajor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_versionMajor()
     * }
     */
    public static long Highs_versionMajor() {
        var mh$ = Highs_versionMajor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_versionMajor");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_versionMinor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG    );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_versionMinor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_versionMinor()
     * }
     */
    public static FunctionDescriptor Highs_versionMinor$descriptor() {
        return Highs_versionMinor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_versionMinor()
     * }
     */
    public static MethodHandle Highs_versionMinor$handle() {
        return Highs_versionMinor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_versionMinor()
     * }
     */
    public static MemorySegment Highs_versionMinor$address() {
        return Highs_versionMinor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_versionMinor()
     * }
     */
    public static long Highs_versionMinor() {
        var mh$ = Highs_versionMinor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_versionMinor");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_versionPatch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG    );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_versionPatch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_versionPatch()
     * }
     */
    public static FunctionDescriptor Highs_versionPatch$descriptor() {
        return Highs_versionPatch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_versionPatch()
     * }
     */
    public static MethodHandle Highs_versionPatch$handle() {
        return Highs_versionPatch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_versionPatch()
     * }
     */
    public static MemorySegment Highs_versionPatch$address() {
        return Highs_versionPatch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_versionPatch()
     * }
     */
    public static long Highs_versionPatch() {
        var mh$ = Highs_versionPatch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_versionPatch");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_githash {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_POINTER    );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_githash");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *Highs_githash()
     * }
     */
    public static FunctionDescriptor Highs_githash$descriptor() {
        return Highs_githash.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *Highs_githash()
     * }
     */
    public static MethodHandle Highs_githash$handle() {
        return Highs_githash.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *Highs_githash()
     * }
     */
    public static MemorySegment Highs_githash$address() {
        return Highs_githash.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *Highs_githash()
     * }
     */
    public static MemorySegment Highs_githash() {
        var mh$ = Highs_githash.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_githash");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_readModel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_readModel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_readModel(void *highs, const char *filename)
     * }
     */
    public static FunctionDescriptor Highs_readModel$descriptor() {
        return Highs_readModel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_readModel(void *highs, const char *filename)
     * }
     */
    public static MethodHandle Highs_readModel$handle() {
        return Highs_readModel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_readModel(void *highs, const char *filename)
     * }
     */
    public static MemorySegment Highs_readModel$address() {
        return Highs_readModel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_readModel(void *highs, const char *filename)
     * }
     */
    public static long Highs_readModel(MemorySegment highs, MemorySegment filename) {
        var mh$ = Highs_readModel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_readModel", highs, filename);
            }
            return (long)mh$.invokeExact(highs, filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_writeModel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_writeModel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_writeModel(void *highs, const char *filename)
     * }
     */
    public static FunctionDescriptor Highs_writeModel$descriptor() {
        return Highs_writeModel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_writeModel(void *highs, const char *filename)
     * }
     */
    public static MethodHandle Highs_writeModel$handle() {
        return Highs_writeModel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_writeModel(void *highs, const char *filename)
     * }
     */
    public static MemorySegment Highs_writeModel$address() {
        return Highs_writeModel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_writeModel(void *highs, const char *filename)
     * }
     */
    public static long Highs_writeModel(MemorySegment highs, MemorySegment filename) {
        var mh$ = Highs_writeModel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_writeModel", highs, filename);
            }
            return (long)mh$.invokeExact(highs, filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_writePresolvedModel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_writePresolvedModel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_writePresolvedModel(void *highs, const char *filename)
     * }
     */
    public static FunctionDescriptor Highs_writePresolvedModel$descriptor() {
        return Highs_writePresolvedModel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_writePresolvedModel(void *highs, const char *filename)
     * }
     */
    public static MethodHandle Highs_writePresolvedModel$handle() {
        return Highs_writePresolvedModel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_writePresolvedModel(void *highs, const char *filename)
     * }
     */
    public static MemorySegment Highs_writePresolvedModel$address() {
        return Highs_writePresolvedModel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_writePresolvedModel(void *highs, const char *filename)
     * }
     */
    public static long Highs_writePresolvedModel(MemorySegment highs, MemorySegment filename) {
        var mh$ = Highs_writePresolvedModel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_writePresolvedModel", highs, filename);
            }
            return (long)mh$.invokeExact(highs, filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_clear");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_clear(void *highs)
     * }
     */
    public static FunctionDescriptor Highs_clear$descriptor() {
        return Highs_clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_clear(void *highs)
     * }
     */
    public static MethodHandle Highs_clear$handle() {
        return Highs_clear.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_clear(void *highs)
     * }
     */
    public static MemorySegment Highs_clear$address() {
        return Highs_clear.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_clear(void *highs)
     * }
     */
    public static long Highs_clear(MemorySegment highs) {
        var mh$ = Highs_clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_clear", highs);
            }
            return (long)mh$.invokeExact(highs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_clearModel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_clearModel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_clearModel(void *highs)
     * }
     */
    public static FunctionDescriptor Highs_clearModel$descriptor() {
        return Highs_clearModel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_clearModel(void *highs)
     * }
     */
    public static MethodHandle Highs_clearModel$handle() {
        return Highs_clearModel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_clearModel(void *highs)
     * }
     */
    public static MemorySegment Highs_clearModel$address() {
        return Highs_clearModel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_clearModel(void *highs)
     * }
     */
    public static long Highs_clearModel(MemorySegment highs) {
        var mh$ = Highs_clearModel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_clearModel", highs);
            }
            return (long)mh$.invokeExact(highs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_clearSolver {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_clearSolver");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_clearSolver(void *highs)
     * }
     */
    public static FunctionDescriptor Highs_clearSolver$descriptor() {
        return Highs_clearSolver.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_clearSolver(void *highs)
     * }
     */
    public static MethodHandle Highs_clearSolver$handle() {
        return Highs_clearSolver.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_clearSolver(void *highs)
     * }
     */
    public static MemorySegment Highs_clearSolver$address() {
        return Highs_clearSolver.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_clearSolver(void *highs)
     * }
     */
    public static long Highs_clearSolver(MemorySegment highs) {
        var mh$ = Highs_clearSolver.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_clearSolver", highs);
            }
            return (long)mh$.invokeExact(highs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_presolve {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_presolve");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_presolve(void *highs)
     * }
     */
    public static FunctionDescriptor Highs_presolve$descriptor() {
        return Highs_presolve.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_presolve(void *highs)
     * }
     */
    public static MethodHandle Highs_presolve$handle() {
        return Highs_presolve.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_presolve(void *highs)
     * }
     */
    public static MemorySegment Highs_presolve$address() {
        return Highs_presolve.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_presolve(void *highs)
     * }
     */
    public static long Highs_presolve(MemorySegment highs) {
        var mh$ = Highs_presolve.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_presolve", highs);
            }
            return (long)mh$.invokeExact(highs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_run {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_run");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_run(void *highs)
     * }
     */
    public static FunctionDescriptor Highs_run$descriptor() {
        return Highs_run.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_run(void *highs)
     * }
     */
    public static MethodHandle Highs_run$handle() {
        return Highs_run.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_run(void *highs)
     * }
     */
    public static MemorySegment Highs_run$address() {
        return Highs_run.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_run(void *highs)
     * }
     */
    public static long Highs_run(MemorySegment highs) {
        var mh$ = Highs_run.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_run", highs);
            }
            return (long)mh$.invokeExact(highs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_postsolve {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_postsolve");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_postsolve(void *highs, const double *col_value, const double *col_dual, const double *row_dual)
     * }
     */
    public static FunctionDescriptor Highs_postsolve$descriptor() {
        return Highs_postsolve.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_postsolve(void *highs, const double *col_value, const double *col_dual, const double *row_dual)
     * }
     */
    public static MethodHandle Highs_postsolve$handle() {
        return Highs_postsolve.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_postsolve(void *highs, const double *col_value, const double *col_dual, const double *row_dual)
     * }
     */
    public static MemorySegment Highs_postsolve$address() {
        return Highs_postsolve.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_postsolve(void *highs, const double *col_value, const double *col_dual, const double *row_dual)
     * }
     */
    public static long Highs_postsolve(MemorySegment highs, MemorySegment col_value, MemorySegment col_dual, MemorySegment row_dual) {
        var mh$ = Highs_postsolve.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_postsolve", highs, col_value, col_dual, row_dual);
            }
            return (long)mh$.invokeExact(highs, col_value, col_dual, row_dual);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_writeSolution {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_writeSolution");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_writeSolution(const void *highs, const char *filename)
     * }
     */
    public static FunctionDescriptor Highs_writeSolution$descriptor() {
        return Highs_writeSolution.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_writeSolution(const void *highs, const char *filename)
     * }
     */
    public static MethodHandle Highs_writeSolution$handle() {
        return Highs_writeSolution.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_writeSolution(const void *highs, const char *filename)
     * }
     */
    public static MemorySegment Highs_writeSolution$address() {
        return Highs_writeSolution.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_writeSolution(const void *highs, const char *filename)
     * }
     */
    public static long Highs_writeSolution(MemorySegment highs, MemorySegment filename) {
        var mh$ = Highs_writeSolution.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_writeSolution", highs, filename);
            }
            return (long)mh$.invokeExact(highs, filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_writeSolutionPretty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_writeSolutionPretty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_writeSolutionPretty(const void *highs, const char *filename)
     * }
     */
    public static FunctionDescriptor Highs_writeSolutionPretty$descriptor() {
        return Highs_writeSolutionPretty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_writeSolutionPretty(const void *highs, const char *filename)
     * }
     */
    public static MethodHandle Highs_writeSolutionPretty$handle() {
        return Highs_writeSolutionPretty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_writeSolutionPretty(const void *highs, const char *filename)
     * }
     */
    public static MemorySegment Highs_writeSolutionPretty$address() {
        return Highs_writeSolutionPretty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_writeSolutionPretty(const void *highs, const char *filename)
     * }
     */
    public static long Highs_writeSolutionPretty(MemorySegment highs, MemorySegment filename) {
        var mh$ = Highs_writeSolutionPretty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_writeSolutionPretty", highs, filename);
            }
            return (long)mh$.invokeExact(highs, filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_passLp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_DOUBLE,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_passLp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_passLp(void *highs, const HighsInt num_col, const HighsInt num_row, const HighsInt num_nz, const HighsInt a_format, const HighsInt sense, const double offset, const double *col_cost, const double *col_lower, const double *col_upper, const double *row_lower, const double *row_upper, const HighsInt *a_start, const HighsInt *a_index, const double *a_value)
     * }
     */
    public static FunctionDescriptor Highs_passLp$descriptor() {
        return Highs_passLp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_passLp(void *highs, const HighsInt num_col, const HighsInt num_row, const HighsInt num_nz, const HighsInt a_format, const HighsInt sense, const double offset, const double *col_cost, const double *col_lower, const double *col_upper, const double *row_lower, const double *row_upper, const HighsInt *a_start, const HighsInt *a_index, const double *a_value)
     * }
     */
    public static MethodHandle Highs_passLp$handle() {
        return Highs_passLp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_passLp(void *highs, const HighsInt num_col, const HighsInt num_row, const HighsInt num_nz, const HighsInt a_format, const HighsInt sense, const double offset, const double *col_cost, const double *col_lower, const double *col_upper, const double *row_lower, const double *row_upper, const HighsInt *a_start, const HighsInt *a_index, const double *a_value)
     * }
     */
    public static MemorySegment Highs_passLp$address() {
        return Highs_passLp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_passLp(void *highs, const HighsInt num_col, const HighsInt num_row, const HighsInt num_nz, const HighsInt a_format, const HighsInt sense, const double offset, const double *col_cost, const double *col_lower, const double *col_upper, const double *row_lower, const double *row_upper, const HighsInt *a_start, const HighsInt *a_index, const double *a_value)
     * }
     */
    public static long Highs_passLp(MemorySegment highs, long num_col, long num_row, long num_nz, long a_format, long sense, double offset, MemorySegment col_cost, MemorySegment col_lower, MemorySegment col_upper, MemorySegment row_lower, MemorySegment row_upper, MemorySegment a_start, MemorySegment a_index, MemorySegment a_value) {
        var mh$ = Highs_passLp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_passLp", highs, num_col, num_row, num_nz, a_format, sense, offset, col_cost, col_lower, col_upper, row_lower, row_upper, a_start, a_index, a_value);
            }
            return (long)mh$.invokeExact(highs, num_col, num_row, num_nz, a_format, sense, offset, col_cost, col_lower, col_upper, row_lower, row_upper, a_start, a_index, a_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_passMip {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_DOUBLE,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_passMip");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_passMip(void *highs, const HighsInt num_col, const HighsInt num_row, const HighsInt num_nz, const HighsInt a_format, const HighsInt sense, const double offset, const double *col_cost, const double *col_lower, const double *col_upper, const double *row_lower, const double *row_upper, const HighsInt *a_start, const HighsInt *a_index, const double *a_value, const HighsInt *integrality)
     * }
     */
    public static FunctionDescriptor Highs_passMip$descriptor() {
        return Highs_passMip.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_passMip(void *highs, const HighsInt num_col, const HighsInt num_row, const HighsInt num_nz, const HighsInt a_format, const HighsInt sense, const double offset, const double *col_cost, const double *col_lower, const double *col_upper, const double *row_lower, const double *row_upper, const HighsInt *a_start, const HighsInt *a_index, const double *a_value, const HighsInt *integrality)
     * }
     */
    public static MethodHandle Highs_passMip$handle() {
        return Highs_passMip.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_passMip(void *highs, const HighsInt num_col, const HighsInt num_row, const HighsInt num_nz, const HighsInt a_format, const HighsInt sense, const double offset, const double *col_cost, const double *col_lower, const double *col_upper, const double *row_lower, const double *row_upper, const HighsInt *a_start, const HighsInt *a_index, const double *a_value, const HighsInt *integrality)
     * }
     */
    public static MemorySegment Highs_passMip$address() {
        return Highs_passMip.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_passMip(void *highs, const HighsInt num_col, const HighsInt num_row, const HighsInt num_nz, const HighsInt a_format, const HighsInt sense, const double offset, const double *col_cost, const double *col_lower, const double *col_upper, const double *row_lower, const double *row_upper, const HighsInt *a_start, const HighsInt *a_index, const double *a_value, const HighsInt *integrality)
     * }
     */
    public static long Highs_passMip(MemorySegment highs, long num_col, long num_row, long num_nz, long a_format, long sense, double offset, MemorySegment col_cost, MemorySegment col_lower, MemorySegment col_upper, MemorySegment row_lower, MemorySegment row_upper, MemorySegment a_start, MemorySegment a_index, MemorySegment a_value, MemorySegment integrality) {
        var mh$ = Highs_passMip.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_passMip", highs, num_col, num_row, num_nz, a_format, sense, offset, col_cost, col_lower, col_upper, row_lower, row_upper, a_start, a_index, a_value, integrality);
            }
            return (long)mh$.invokeExact(highs, num_col, num_row, num_nz, a_format, sense, offset, col_cost, col_lower, col_upper, row_lower, row_upper, a_start, a_index, a_value, integrality);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_passModel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_DOUBLE,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_passModel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_passModel(void *highs, const HighsInt num_col, const HighsInt num_row, const HighsInt num_nz, const HighsInt q_num_nz, const HighsInt a_format, const HighsInt q_format, const HighsInt sense, const double offset, const double *col_cost, const double *col_lower, const double *col_upper, const double *row_lower, const double *row_upper, const HighsInt *a_start, const HighsInt *a_index, const double *a_value, const HighsInt *q_start, const HighsInt *q_index, const double *q_value, const HighsInt *integrality)
     * }
     */
    public static FunctionDescriptor Highs_passModel$descriptor() {
        return Highs_passModel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_passModel(void *highs, const HighsInt num_col, const HighsInt num_row, const HighsInt num_nz, const HighsInt q_num_nz, const HighsInt a_format, const HighsInt q_format, const HighsInt sense, const double offset, const double *col_cost, const double *col_lower, const double *col_upper, const double *row_lower, const double *row_upper, const HighsInt *a_start, const HighsInt *a_index, const double *a_value, const HighsInt *q_start, const HighsInt *q_index, const double *q_value, const HighsInt *integrality)
     * }
     */
    public static MethodHandle Highs_passModel$handle() {
        return Highs_passModel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_passModel(void *highs, const HighsInt num_col, const HighsInt num_row, const HighsInt num_nz, const HighsInt q_num_nz, const HighsInt a_format, const HighsInt q_format, const HighsInt sense, const double offset, const double *col_cost, const double *col_lower, const double *col_upper, const double *row_lower, const double *row_upper, const HighsInt *a_start, const HighsInt *a_index, const double *a_value, const HighsInt *q_start, const HighsInt *q_index, const double *q_value, const HighsInt *integrality)
     * }
     */
    public static MemorySegment Highs_passModel$address() {
        return Highs_passModel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_passModel(void *highs, const HighsInt num_col, const HighsInt num_row, const HighsInt num_nz, const HighsInt q_num_nz, const HighsInt a_format, const HighsInt q_format, const HighsInt sense, const double offset, const double *col_cost, const double *col_lower, const double *col_upper, const double *row_lower, const double *row_upper, const HighsInt *a_start, const HighsInt *a_index, const double *a_value, const HighsInt *q_start, const HighsInt *q_index, const double *q_value, const HighsInt *integrality)
     * }
     */
    public static long Highs_passModel(MemorySegment highs, long num_col, long num_row, long num_nz, long q_num_nz, long a_format, long q_format, long sense, double offset, MemorySegment col_cost, MemorySegment col_lower, MemorySegment col_upper, MemorySegment row_lower, MemorySegment row_upper, MemorySegment a_start, MemorySegment a_index, MemorySegment a_value, MemorySegment q_start, MemorySegment q_index, MemorySegment q_value, MemorySegment integrality) {
        var mh$ = Highs_passModel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_passModel", highs, num_col, num_row, num_nz, q_num_nz, a_format, q_format, sense, offset, col_cost, col_lower, col_upper, row_lower, row_upper, a_start, a_index, a_value, q_start, q_index, q_value, integrality);
            }
            return (long)mh$.invokeExact(highs, num_col, num_row, num_nz, q_num_nz, a_format, q_format, sense, offset, col_cost, col_lower, col_upper, row_lower, row_upper, a_start, a_index, a_value, q_start, q_index, q_value, integrality);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_passHessian {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_passHessian");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_passHessian(void *highs, const HighsInt dim, const HighsInt num_nz, const HighsInt format, const HighsInt *start, const HighsInt *index, const double *value)
     * }
     */
    public static FunctionDescriptor Highs_passHessian$descriptor() {
        return Highs_passHessian.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_passHessian(void *highs, const HighsInt dim, const HighsInt num_nz, const HighsInt format, const HighsInt *start, const HighsInt *index, const double *value)
     * }
     */
    public static MethodHandle Highs_passHessian$handle() {
        return Highs_passHessian.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_passHessian(void *highs, const HighsInt dim, const HighsInt num_nz, const HighsInt format, const HighsInt *start, const HighsInt *index, const double *value)
     * }
     */
    public static MemorySegment Highs_passHessian$address() {
        return Highs_passHessian.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_passHessian(void *highs, const HighsInt dim, const HighsInt num_nz, const HighsInt format, const HighsInt *start, const HighsInt *index, const double *value)
     * }
     */
    public static long Highs_passHessian(MemorySegment highs, long dim, long num_nz, long format, MemorySegment start, MemorySegment index, MemorySegment value) {
        var mh$ = Highs_passHessian.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_passHessian", highs, dim, num_nz, format, start, index, value);
            }
            return (long)mh$.invokeExact(highs, dim, num_nz, format, start, index, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_passLinearObjectives {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_passLinearObjectives");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_passLinearObjectives(const void *highs, const HighsInt num_linear_objective, const double *weight, const double *offset, const double *coefficients, const double *abs_tolerance, const double *rel_tolerance, const HighsInt *priority)
     * }
     */
    public static FunctionDescriptor Highs_passLinearObjectives$descriptor() {
        return Highs_passLinearObjectives.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_passLinearObjectives(const void *highs, const HighsInt num_linear_objective, const double *weight, const double *offset, const double *coefficients, const double *abs_tolerance, const double *rel_tolerance, const HighsInt *priority)
     * }
     */
    public static MethodHandle Highs_passLinearObjectives$handle() {
        return Highs_passLinearObjectives.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_passLinearObjectives(const void *highs, const HighsInt num_linear_objective, const double *weight, const double *offset, const double *coefficients, const double *abs_tolerance, const double *rel_tolerance, const HighsInt *priority)
     * }
     */
    public static MemorySegment Highs_passLinearObjectives$address() {
        return Highs_passLinearObjectives.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_passLinearObjectives(const void *highs, const HighsInt num_linear_objective, const double *weight, const double *offset, const double *coefficients, const double *abs_tolerance, const double *rel_tolerance, const HighsInt *priority)
     * }
     */
    public static long Highs_passLinearObjectives(MemorySegment highs, long num_linear_objective, MemorySegment weight, MemorySegment offset, MemorySegment coefficients, MemorySegment abs_tolerance, MemorySegment rel_tolerance, MemorySegment priority) {
        var mh$ = Highs_passLinearObjectives.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_passLinearObjectives", highs, num_linear_objective, weight, offset, coefficients, abs_tolerance, rel_tolerance, priority);
            }
            return (long)mh$.invokeExact(highs, num_linear_objective, weight, offset, coefficients, abs_tolerance, rel_tolerance, priority);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_addLinearObjective {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_DOUBLE,
            highs4j_c_api_h.C_DOUBLE,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_DOUBLE,
            highs4j_c_api_h.C_DOUBLE,
            highs4j_c_api_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_addLinearObjective");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_addLinearObjective(const void *highs, const double weight, const double offset, const double *coefficients, const double abs_tolerance, const double rel_tolerance, const HighsInt priority)
     * }
     */
    public static FunctionDescriptor Highs_addLinearObjective$descriptor() {
        return Highs_addLinearObjective.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_addLinearObjective(const void *highs, const double weight, const double offset, const double *coefficients, const double abs_tolerance, const double rel_tolerance, const HighsInt priority)
     * }
     */
    public static MethodHandle Highs_addLinearObjective$handle() {
        return Highs_addLinearObjective.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_addLinearObjective(const void *highs, const double weight, const double offset, const double *coefficients, const double abs_tolerance, const double rel_tolerance, const HighsInt priority)
     * }
     */
    public static MemorySegment Highs_addLinearObjective$address() {
        return Highs_addLinearObjective.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_addLinearObjective(const void *highs, const double weight, const double offset, const double *coefficients, const double abs_tolerance, const double rel_tolerance, const HighsInt priority)
     * }
     */
    public static long Highs_addLinearObjective(MemorySegment highs, double weight, double offset, MemorySegment coefficients, double abs_tolerance, double rel_tolerance, long priority) {
        var mh$ = Highs_addLinearObjective.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_addLinearObjective", highs, weight, offset, coefficients, abs_tolerance, rel_tolerance, priority);
            }
            return (long)mh$.invokeExact(highs, weight, offset, coefficients, abs_tolerance, rel_tolerance, priority);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_clearLinearObjectives {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_clearLinearObjectives");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_clearLinearObjectives(const void *highs)
     * }
     */
    public static FunctionDescriptor Highs_clearLinearObjectives$descriptor() {
        return Highs_clearLinearObjectives.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_clearLinearObjectives(const void *highs)
     * }
     */
    public static MethodHandle Highs_clearLinearObjectives$handle() {
        return Highs_clearLinearObjectives.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_clearLinearObjectives(const void *highs)
     * }
     */
    public static MemorySegment Highs_clearLinearObjectives$address() {
        return Highs_clearLinearObjectives.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_clearLinearObjectives(const void *highs)
     * }
     */
    public static long Highs_clearLinearObjectives(MemorySegment highs) {
        var mh$ = Highs_clearLinearObjectives.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_clearLinearObjectives", highs);
            }
            return (long)mh$.invokeExact(highs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_passRowName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_passRowName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_passRowName(const void *highs, const HighsInt row, const char *name)
     * }
     */
    public static FunctionDescriptor Highs_passRowName$descriptor() {
        return Highs_passRowName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_passRowName(const void *highs, const HighsInt row, const char *name)
     * }
     */
    public static MethodHandle Highs_passRowName$handle() {
        return Highs_passRowName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_passRowName(const void *highs, const HighsInt row, const char *name)
     * }
     */
    public static MemorySegment Highs_passRowName$address() {
        return Highs_passRowName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_passRowName(const void *highs, const HighsInt row, const char *name)
     * }
     */
    public static long Highs_passRowName(MemorySegment highs, long row, MemorySegment name) {
        var mh$ = Highs_passRowName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_passRowName", highs, row, name);
            }
            return (long)mh$.invokeExact(highs, row, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_passColName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_passColName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_passColName(const void *highs, const HighsInt col, const char *name)
     * }
     */
    public static FunctionDescriptor Highs_passColName$descriptor() {
        return Highs_passColName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_passColName(const void *highs, const HighsInt col, const char *name)
     * }
     */
    public static MethodHandle Highs_passColName$handle() {
        return Highs_passColName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_passColName(const void *highs, const HighsInt col, const char *name)
     * }
     */
    public static MemorySegment Highs_passColName$address() {
        return Highs_passColName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_passColName(const void *highs, const HighsInt col, const char *name)
     * }
     */
    public static long Highs_passColName(MemorySegment highs, long col, MemorySegment name) {
        var mh$ = Highs_passColName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_passColName", highs, col, name);
            }
            return (long)mh$.invokeExact(highs, col, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_passModelName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_passModelName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_passModelName(const void *highs, const char *name)
     * }
     */
    public static FunctionDescriptor Highs_passModelName$descriptor() {
        return Highs_passModelName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_passModelName(const void *highs, const char *name)
     * }
     */
    public static MethodHandle Highs_passModelName$handle() {
        return Highs_passModelName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_passModelName(const void *highs, const char *name)
     * }
     */
    public static MemorySegment Highs_passModelName$address() {
        return Highs_passModelName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_passModelName(const void *highs, const char *name)
     * }
     */
    public static long Highs_passModelName(MemorySegment highs, MemorySegment name) {
        var mh$ = Highs_passModelName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_passModelName", highs, name);
            }
            return (long)mh$.invokeExact(highs, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_readOptions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_readOptions");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_readOptions(const void *highs, const char *filename)
     * }
     */
    public static FunctionDescriptor Highs_readOptions$descriptor() {
        return Highs_readOptions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_readOptions(const void *highs, const char *filename)
     * }
     */
    public static MethodHandle Highs_readOptions$handle() {
        return Highs_readOptions.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_readOptions(const void *highs, const char *filename)
     * }
     */
    public static MemorySegment Highs_readOptions$address() {
        return Highs_readOptions.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_readOptions(const void *highs, const char *filename)
     * }
     */
    public static long Highs_readOptions(MemorySegment highs, MemorySegment filename) {
        var mh$ = Highs_readOptions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_readOptions", highs, filename);
            }
            return (long)mh$.invokeExact(highs, filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_setBoolOptionValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_setBoolOptionValue");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_setBoolOptionValue(void *highs, const char *option, const HighsInt value)
     * }
     */
    public static FunctionDescriptor Highs_setBoolOptionValue$descriptor() {
        return Highs_setBoolOptionValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_setBoolOptionValue(void *highs, const char *option, const HighsInt value)
     * }
     */
    public static MethodHandle Highs_setBoolOptionValue$handle() {
        return Highs_setBoolOptionValue.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_setBoolOptionValue(void *highs, const char *option, const HighsInt value)
     * }
     */
    public static MemorySegment Highs_setBoolOptionValue$address() {
        return Highs_setBoolOptionValue.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_setBoolOptionValue(void *highs, const char *option, const HighsInt value)
     * }
     */
    public static long Highs_setBoolOptionValue(MemorySegment highs, MemorySegment option, long value) {
        var mh$ = Highs_setBoolOptionValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_setBoolOptionValue", highs, option, value);
            }
            return (long)mh$.invokeExact(highs, option, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_setIntOptionValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_setIntOptionValue");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_setIntOptionValue(void *highs, const char *option, const HighsInt value)
     * }
     */
    public static FunctionDescriptor Highs_setIntOptionValue$descriptor() {
        return Highs_setIntOptionValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_setIntOptionValue(void *highs, const char *option, const HighsInt value)
     * }
     */
    public static MethodHandle Highs_setIntOptionValue$handle() {
        return Highs_setIntOptionValue.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_setIntOptionValue(void *highs, const char *option, const HighsInt value)
     * }
     */
    public static MemorySegment Highs_setIntOptionValue$address() {
        return Highs_setIntOptionValue.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_setIntOptionValue(void *highs, const char *option, const HighsInt value)
     * }
     */
    public static long Highs_setIntOptionValue(MemorySegment highs, MemorySegment option, long value) {
        var mh$ = Highs_setIntOptionValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_setIntOptionValue", highs, option, value);
            }
            return (long)mh$.invokeExact(highs, option, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_setDoubleOptionValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_setDoubleOptionValue");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_setDoubleOptionValue(void *highs, const char *option, const double value)
     * }
     */
    public static FunctionDescriptor Highs_setDoubleOptionValue$descriptor() {
        return Highs_setDoubleOptionValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_setDoubleOptionValue(void *highs, const char *option, const double value)
     * }
     */
    public static MethodHandle Highs_setDoubleOptionValue$handle() {
        return Highs_setDoubleOptionValue.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_setDoubleOptionValue(void *highs, const char *option, const double value)
     * }
     */
    public static MemorySegment Highs_setDoubleOptionValue$address() {
        return Highs_setDoubleOptionValue.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_setDoubleOptionValue(void *highs, const char *option, const double value)
     * }
     */
    public static long Highs_setDoubleOptionValue(MemorySegment highs, MemorySegment option, double value) {
        var mh$ = Highs_setDoubleOptionValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_setDoubleOptionValue", highs, option, value);
            }
            return (long)mh$.invokeExact(highs, option, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_setStringOptionValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_setStringOptionValue");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_setStringOptionValue(void *highs, const char *option, const char *value)
     * }
     */
    public static FunctionDescriptor Highs_setStringOptionValue$descriptor() {
        return Highs_setStringOptionValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_setStringOptionValue(void *highs, const char *option, const char *value)
     * }
     */
    public static MethodHandle Highs_setStringOptionValue$handle() {
        return Highs_setStringOptionValue.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_setStringOptionValue(void *highs, const char *option, const char *value)
     * }
     */
    public static MemorySegment Highs_setStringOptionValue$address() {
        return Highs_setStringOptionValue.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_setStringOptionValue(void *highs, const char *option, const char *value)
     * }
     */
    public static long Highs_setStringOptionValue(MemorySegment highs, MemorySegment option, MemorySegment value) {
        var mh$ = Highs_setStringOptionValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_setStringOptionValue", highs, option, value);
            }
            return (long)mh$.invokeExact(highs, option, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getBoolOptionValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getBoolOptionValue");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getBoolOptionValue(const void *highs, const char *option, HighsInt *value)
     * }
     */
    public static FunctionDescriptor Highs_getBoolOptionValue$descriptor() {
        return Highs_getBoolOptionValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getBoolOptionValue(const void *highs, const char *option, HighsInt *value)
     * }
     */
    public static MethodHandle Highs_getBoolOptionValue$handle() {
        return Highs_getBoolOptionValue.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getBoolOptionValue(const void *highs, const char *option, HighsInt *value)
     * }
     */
    public static MemorySegment Highs_getBoolOptionValue$address() {
        return Highs_getBoolOptionValue.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getBoolOptionValue(const void *highs, const char *option, HighsInt *value)
     * }
     */
    public static long Highs_getBoolOptionValue(MemorySegment highs, MemorySegment option, MemorySegment value) {
        var mh$ = Highs_getBoolOptionValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getBoolOptionValue", highs, option, value);
            }
            return (long)mh$.invokeExact(highs, option, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getIntOptionValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getIntOptionValue");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getIntOptionValue(const void *highs, const char *option, HighsInt *value)
     * }
     */
    public static FunctionDescriptor Highs_getIntOptionValue$descriptor() {
        return Highs_getIntOptionValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getIntOptionValue(const void *highs, const char *option, HighsInt *value)
     * }
     */
    public static MethodHandle Highs_getIntOptionValue$handle() {
        return Highs_getIntOptionValue.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getIntOptionValue(const void *highs, const char *option, HighsInt *value)
     * }
     */
    public static MemorySegment Highs_getIntOptionValue$address() {
        return Highs_getIntOptionValue.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getIntOptionValue(const void *highs, const char *option, HighsInt *value)
     * }
     */
    public static long Highs_getIntOptionValue(MemorySegment highs, MemorySegment option, MemorySegment value) {
        var mh$ = Highs_getIntOptionValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getIntOptionValue", highs, option, value);
            }
            return (long)mh$.invokeExact(highs, option, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getDoubleOptionValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getDoubleOptionValue");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getDoubleOptionValue(const void *highs, const char *option, double *value)
     * }
     */
    public static FunctionDescriptor Highs_getDoubleOptionValue$descriptor() {
        return Highs_getDoubleOptionValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getDoubleOptionValue(const void *highs, const char *option, double *value)
     * }
     */
    public static MethodHandle Highs_getDoubleOptionValue$handle() {
        return Highs_getDoubleOptionValue.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getDoubleOptionValue(const void *highs, const char *option, double *value)
     * }
     */
    public static MemorySegment Highs_getDoubleOptionValue$address() {
        return Highs_getDoubleOptionValue.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getDoubleOptionValue(const void *highs, const char *option, double *value)
     * }
     */
    public static long Highs_getDoubleOptionValue(MemorySegment highs, MemorySegment option, MemorySegment value) {
        var mh$ = Highs_getDoubleOptionValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getDoubleOptionValue", highs, option, value);
            }
            return (long)mh$.invokeExact(highs, option, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getStringOptionValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getStringOptionValue");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getStringOptionValue(const void *highs, const char *option, char *value)
     * }
     */
    public static FunctionDescriptor Highs_getStringOptionValue$descriptor() {
        return Highs_getStringOptionValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getStringOptionValue(const void *highs, const char *option, char *value)
     * }
     */
    public static MethodHandle Highs_getStringOptionValue$handle() {
        return Highs_getStringOptionValue.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getStringOptionValue(const void *highs, const char *option, char *value)
     * }
     */
    public static MemorySegment Highs_getStringOptionValue$address() {
        return Highs_getStringOptionValue.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getStringOptionValue(const void *highs, const char *option, char *value)
     * }
     */
    public static long Highs_getStringOptionValue(MemorySegment highs, MemorySegment option, MemorySegment value) {
        var mh$ = Highs_getStringOptionValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getStringOptionValue", highs, option, value);
            }
            return (long)mh$.invokeExact(highs, option, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getOptionType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getOptionType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getOptionType(const void *highs, const char *option, HighsInt *type)
     * }
     */
    public static FunctionDescriptor Highs_getOptionType$descriptor() {
        return Highs_getOptionType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getOptionType(const void *highs, const char *option, HighsInt *type)
     * }
     */
    public static MethodHandle Highs_getOptionType$handle() {
        return Highs_getOptionType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getOptionType(const void *highs, const char *option, HighsInt *type)
     * }
     */
    public static MemorySegment Highs_getOptionType$address() {
        return Highs_getOptionType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getOptionType(const void *highs, const char *option, HighsInt *type)
     * }
     */
    public static long Highs_getOptionType(MemorySegment highs, MemorySegment option, MemorySegment type) {
        var mh$ = Highs_getOptionType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getOptionType", highs, option, type);
            }
            return (long)mh$.invokeExact(highs, option, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_resetOptions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_resetOptions");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_resetOptions(void *highs)
     * }
     */
    public static FunctionDescriptor Highs_resetOptions$descriptor() {
        return Highs_resetOptions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_resetOptions(void *highs)
     * }
     */
    public static MethodHandle Highs_resetOptions$handle() {
        return Highs_resetOptions.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_resetOptions(void *highs)
     * }
     */
    public static MemorySegment Highs_resetOptions$address() {
        return Highs_resetOptions.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_resetOptions(void *highs)
     * }
     */
    public static long Highs_resetOptions(MemorySegment highs) {
        var mh$ = Highs_resetOptions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_resetOptions", highs);
            }
            return (long)mh$.invokeExact(highs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_writeOptions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_writeOptions");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_writeOptions(const void *highs, const char *filename)
     * }
     */
    public static FunctionDescriptor Highs_writeOptions$descriptor() {
        return Highs_writeOptions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_writeOptions(const void *highs, const char *filename)
     * }
     */
    public static MethodHandle Highs_writeOptions$handle() {
        return Highs_writeOptions.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_writeOptions(const void *highs, const char *filename)
     * }
     */
    public static MemorySegment Highs_writeOptions$address() {
        return Highs_writeOptions.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_writeOptions(const void *highs, const char *filename)
     * }
     */
    public static long Highs_writeOptions(MemorySegment highs, MemorySegment filename) {
        var mh$ = Highs_writeOptions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_writeOptions", highs, filename);
            }
            return (long)mh$.invokeExact(highs, filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_writeOptionsDeviations {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_writeOptionsDeviations");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_writeOptionsDeviations(const void *highs, const char *filename)
     * }
     */
    public static FunctionDescriptor Highs_writeOptionsDeviations$descriptor() {
        return Highs_writeOptionsDeviations.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_writeOptionsDeviations(const void *highs, const char *filename)
     * }
     */
    public static MethodHandle Highs_writeOptionsDeviations$handle() {
        return Highs_writeOptionsDeviations.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_writeOptionsDeviations(const void *highs, const char *filename)
     * }
     */
    public static MemorySegment Highs_writeOptionsDeviations$address() {
        return Highs_writeOptionsDeviations.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_writeOptionsDeviations(const void *highs, const char *filename)
     * }
     */
    public static long Highs_writeOptionsDeviations(MemorySegment highs, MemorySegment filename) {
        var mh$ = Highs_writeOptionsDeviations.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_writeOptionsDeviations", highs, filename);
            }
            return (long)mh$.invokeExact(highs, filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getNumOptions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getNumOptions");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getNumOptions(const void *highs)
     * }
     */
    public static FunctionDescriptor Highs_getNumOptions$descriptor() {
        return Highs_getNumOptions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getNumOptions(const void *highs)
     * }
     */
    public static MethodHandle Highs_getNumOptions$handle() {
        return Highs_getNumOptions.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getNumOptions(const void *highs)
     * }
     */
    public static MemorySegment Highs_getNumOptions$address() {
        return Highs_getNumOptions.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getNumOptions(const void *highs)
     * }
     */
    public static long Highs_getNumOptions(MemorySegment highs) {
        var mh$ = Highs_getNumOptions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getNumOptions", highs);
            }
            return (long)mh$.invokeExact(highs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getOptionName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getOptionName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getOptionName(const void *highs, const HighsInt index, char **name)
     * }
     */
    public static FunctionDescriptor Highs_getOptionName$descriptor() {
        return Highs_getOptionName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getOptionName(const void *highs, const HighsInt index, char **name)
     * }
     */
    public static MethodHandle Highs_getOptionName$handle() {
        return Highs_getOptionName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getOptionName(const void *highs, const HighsInt index, char **name)
     * }
     */
    public static MemorySegment Highs_getOptionName$address() {
        return Highs_getOptionName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getOptionName(const void *highs, const HighsInt index, char **name)
     * }
     */
    public static long Highs_getOptionName(MemorySegment highs, long index, MemorySegment name) {
        var mh$ = Highs_getOptionName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getOptionName", highs, index, name);
            }
            return (long)mh$.invokeExact(highs, index, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getBoolOptionValues {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getBoolOptionValues");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getBoolOptionValues(const void *highs, const char *option, HighsInt *current_value, HighsInt *default_value)
     * }
     */
    public static FunctionDescriptor Highs_getBoolOptionValues$descriptor() {
        return Highs_getBoolOptionValues.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getBoolOptionValues(const void *highs, const char *option, HighsInt *current_value, HighsInt *default_value)
     * }
     */
    public static MethodHandle Highs_getBoolOptionValues$handle() {
        return Highs_getBoolOptionValues.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getBoolOptionValues(const void *highs, const char *option, HighsInt *current_value, HighsInt *default_value)
     * }
     */
    public static MemorySegment Highs_getBoolOptionValues$address() {
        return Highs_getBoolOptionValues.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getBoolOptionValues(const void *highs, const char *option, HighsInt *current_value, HighsInt *default_value)
     * }
     */
    public static long Highs_getBoolOptionValues(MemorySegment highs, MemorySegment option, MemorySegment current_value, MemorySegment default_value) {
        var mh$ = Highs_getBoolOptionValues.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getBoolOptionValues", highs, option, current_value, default_value);
            }
            return (long)mh$.invokeExact(highs, option, current_value, default_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getIntOptionValues {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getIntOptionValues");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getIntOptionValues(const void *highs, const char *option, HighsInt *current_value, HighsInt *min_value, HighsInt *max_value, HighsInt *default_value)
     * }
     */
    public static FunctionDescriptor Highs_getIntOptionValues$descriptor() {
        return Highs_getIntOptionValues.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getIntOptionValues(const void *highs, const char *option, HighsInt *current_value, HighsInt *min_value, HighsInt *max_value, HighsInt *default_value)
     * }
     */
    public static MethodHandle Highs_getIntOptionValues$handle() {
        return Highs_getIntOptionValues.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getIntOptionValues(const void *highs, const char *option, HighsInt *current_value, HighsInt *min_value, HighsInt *max_value, HighsInt *default_value)
     * }
     */
    public static MemorySegment Highs_getIntOptionValues$address() {
        return Highs_getIntOptionValues.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getIntOptionValues(const void *highs, const char *option, HighsInt *current_value, HighsInt *min_value, HighsInt *max_value, HighsInt *default_value)
     * }
     */
    public static long Highs_getIntOptionValues(MemorySegment highs, MemorySegment option, MemorySegment current_value, MemorySegment min_value, MemorySegment max_value, MemorySegment default_value) {
        var mh$ = Highs_getIntOptionValues.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getIntOptionValues", highs, option, current_value, min_value, max_value, default_value);
            }
            return (long)mh$.invokeExact(highs, option, current_value, min_value, max_value, default_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getDoubleOptionValues {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getDoubleOptionValues");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getDoubleOptionValues(const void *highs, const char *option, double *current_value, double *min_value, double *max_value, double *default_value)
     * }
     */
    public static FunctionDescriptor Highs_getDoubleOptionValues$descriptor() {
        return Highs_getDoubleOptionValues.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getDoubleOptionValues(const void *highs, const char *option, double *current_value, double *min_value, double *max_value, double *default_value)
     * }
     */
    public static MethodHandle Highs_getDoubleOptionValues$handle() {
        return Highs_getDoubleOptionValues.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getDoubleOptionValues(const void *highs, const char *option, double *current_value, double *min_value, double *max_value, double *default_value)
     * }
     */
    public static MemorySegment Highs_getDoubleOptionValues$address() {
        return Highs_getDoubleOptionValues.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getDoubleOptionValues(const void *highs, const char *option, double *current_value, double *min_value, double *max_value, double *default_value)
     * }
     */
    public static long Highs_getDoubleOptionValues(MemorySegment highs, MemorySegment option, MemorySegment current_value, MemorySegment min_value, MemorySegment max_value, MemorySegment default_value) {
        var mh$ = Highs_getDoubleOptionValues.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getDoubleOptionValues", highs, option, current_value, min_value, max_value, default_value);
            }
            return (long)mh$.invokeExact(highs, option, current_value, min_value, max_value, default_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getStringOptionValues {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getStringOptionValues");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getStringOptionValues(const void *highs, const char *option, char *current_value, char *default_value)
     * }
     */
    public static FunctionDescriptor Highs_getStringOptionValues$descriptor() {
        return Highs_getStringOptionValues.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getStringOptionValues(const void *highs, const char *option, char *current_value, char *default_value)
     * }
     */
    public static MethodHandle Highs_getStringOptionValues$handle() {
        return Highs_getStringOptionValues.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getStringOptionValues(const void *highs, const char *option, char *current_value, char *default_value)
     * }
     */
    public static MemorySegment Highs_getStringOptionValues$address() {
        return Highs_getStringOptionValues.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getStringOptionValues(const void *highs, const char *option, char *current_value, char *default_value)
     * }
     */
    public static long Highs_getStringOptionValues(MemorySegment highs, MemorySegment option, MemorySegment current_value, MemorySegment default_value) {
        var mh$ = Highs_getStringOptionValues.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getStringOptionValues", highs, option, current_value, default_value);
            }
            return (long)mh$.invokeExact(highs, option, current_value, default_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getIntInfoValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getIntInfoValue");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getIntInfoValue(const void *highs, const char *info, HighsInt *value)
     * }
     */
    public static FunctionDescriptor Highs_getIntInfoValue$descriptor() {
        return Highs_getIntInfoValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getIntInfoValue(const void *highs, const char *info, HighsInt *value)
     * }
     */
    public static MethodHandle Highs_getIntInfoValue$handle() {
        return Highs_getIntInfoValue.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getIntInfoValue(const void *highs, const char *info, HighsInt *value)
     * }
     */
    public static MemorySegment Highs_getIntInfoValue$address() {
        return Highs_getIntInfoValue.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getIntInfoValue(const void *highs, const char *info, HighsInt *value)
     * }
     */
    public static long Highs_getIntInfoValue(MemorySegment highs, MemorySegment info, MemorySegment value) {
        var mh$ = Highs_getIntInfoValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getIntInfoValue", highs, info, value);
            }
            return (long)mh$.invokeExact(highs, info, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getDoubleInfoValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getDoubleInfoValue");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getDoubleInfoValue(const void *highs, const char *info, double *value)
     * }
     */
    public static FunctionDescriptor Highs_getDoubleInfoValue$descriptor() {
        return Highs_getDoubleInfoValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getDoubleInfoValue(const void *highs, const char *info, double *value)
     * }
     */
    public static MethodHandle Highs_getDoubleInfoValue$handle() {
        return Highs_getDoubleInfoValue.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getDoubleInfoValue(const void *highs, const char *info, double *value)
     * }
     */
    public static MemorySegment Highs_getDoubleInfoValue$address() {
        return Highs_getDoubleInfoValue.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getDoubleInfoValue(const void *highs, const char *info, double *value)
     * }
     */
    public static long Highs_getDoubleInfoValue(MemorySegment highs, MemorySegment info, MemorySegment value) {
        var mh$ = Highs_getDoubleInfoValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getDoubleInfoValue", highs, info, value);
            }
            return (long)mh$.invokeExact(highs, info, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getInt64InfoValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getInt64InfoValue");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getInt64InfoValue(const void *highs, const char *info, int64_t *value)
     * }
     */
    public static FunctionDescriptor Highs_getInt64InfoValue$descriptor() {
        return Highs_getInt64InfoValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getInt64InfoValue(const void *highs, const char *info, int64_t *value)
     * }
     */
    public static MethodHandle Highs_getInt64InfoValue$handle() {
        return Highs_getInt64InfoValue.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getInt64InfoValue(const void *highs, const char *info, int64_t *value)
     * }
     */
    public static MemorySegment Highs_getInt64InfoValue$address() {
        return Highs_getInt64InfoValue.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getInt64InfoValue(const void *highs, const char *info, int64_t *value)
     * }
     */
    public static long Highs_getInt64InfoValue(MemorySegment highs, MemorySegment info, MemorySegment value) {
        var mh$ = Highs_getInt64InfoValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getInt64InfoValue", highs, info, value);
            }
            return (long)mh$.invokeExact(highs, info, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getInfoType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getInfoType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getInfoType(const void *highs, const char *info, HighsInt *type)
     * }
     */
    public static FunctionDescriptor Highs_getInfoType$descriptor() {
        return Highs_getInfoType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getInfoType(const void *highs, const char *info, HighsInt *type)
     * }
     */
    public static MethodHandle Highs_getInfoType$handle() {
        return Highs_getInfoType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getInfoType(const void *highs, const char *info, HighsInt *type)
     * }
     */
    public static MemorySegment Highs_getInfoType$address() {
        return Highs_getInfoType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getInfoType(const void *highs, const char *info, HighsInt *type)
     * }
     */
    public static long Highs_getInfoType(MemorySegment highs, MemorySegment info, MemorySegment type) {
        var mh$ = Highs_getInfoType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getInfoType", highs, info, type);
            }
            return (long)mh$.invokeExact(highs, info, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getSolution {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getSolution");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getSolution(const void *highs, double *col_value, double *col_dual, double *row_value, double *row_dual)
     * }
     */
    public static FunctionDescriptor Highs_getSolution$descriptor() {
        return Highs_getSolution.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getSolution(const void *highs, double *col_value, double *col_dual, double *row_value, double *row_dual)
     * }
     */
    public static MethodHandle Highs_getSolution$handle() {
        return Highs_getSolution.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getSolution(const void *highs, double *col_value, double *col_dual, double *row_value, double *row_dual)
     * }
     */
    public static MemorySegment Highs_getSolution$address() {
        return Highs_getSolution.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getSolution(const void *highs, double *col_value, double *col_dual, double *row_value, double *row_dual)
     * }
     */
    public static long Highs_getSolution(MemorySegment highs, MemorySegment col_value, MemorySegment col_dual, MemorySegment row_value, MemorySegment row_dual) {
        var mh$ = Highs_getSolution.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getSolution", highs, col_value, col_dual, row_value, row_dual);
            }
            return (long)mh$.invokeExact(highs, col_value, col_dual, row_value, row_dual);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getBasis {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getBasis");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getBasis(const void *highs, HighsInt *col_status, HighsInt *row_status)
     * }
     */
    public static FunctionDescriptor Highs_getBasis$descriptor() {
        return Highs_getBasis.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getBasis(const void *highs, HighsInt *col_status, HighsInt *row_status)
     * }
     */
    public static MethodHandle Highs_getBasis$handle() {
        return Highs_getBasis.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getBasis(const void *highs, HighsInt *col_status, HighsInt *row_status)
     * }
     */
    public static MemorySegment Highs_getBasis$address() {
        return Highs_getBasis.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getBasis(const void *highs, HighsInt *col_status, HighsInt *row_status)
     * }
     */
    public static long Highs_getBasis(MemorySegment highs, MemorySegment col_status, MemorySegment row_status) {
        var mh$ = Highs_getBasis.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getBasis", highs, col_status, row_status);
            }
            return (long)mh$.invokeExact(highs, col_status, row_status);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getModelStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getModelStatus");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getModelStatus(const void *highs)
     * }
     */
    public static FunctionDescriptor Highs_getModelStatus$descriptor() {
        return Highs_getModelStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getModelStatus(const void *highs)
     * }
     */
    public static MethodHandle Highs_getModelStatus$handle() {
        return Highs_getModelStatus.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getModelStatus(const void *highs)
     * }
     */
    public static MemorySegment Highs_getModelStatus$address() {
        return Highs_getModelStatus.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getModelStatus(const void *highs)
     * }
     */
    public static long Highs_getModelStatus(MemorySegment highs) {
        var mh$ = Highs_getModelStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getModelStatus", highs);
            }
            return (long)mh$.invokeExact(highs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getDualRay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getDualRay");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getDualRay(const void *highs, HighsInt *has_dual_ray, double *dual_ray_value)
     * }
     */
    public static FunctionDescriptor Highs_getDualRay$descriptor() {
        return Highs_getDualRay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getDualRay(const void *highs, HighsInt *has_dual_ray, double *dual_ray_value)
     * }
     */
    public static MethodHandle Highs_getDualRay$handle() {
        return Highs_getDualRay.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getDualRay(const void *highs, HighsInt *has_dual_ray, double *dual_ray_value)
     * }
     */
    public static MemorySegment Highs_getDualRay$address() {
        return Highs_getDualRay.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getDualRay(const void *highs, HighsInt *has_dual_ray, double *dual_ray_value)
     * }
     */
    public static long Highs_getDualRay(MemorySegment highs, MemorySegment has_dual_ray, MemorySegment dual_ray_value) {
        var mh$ = Highs_getDualRay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getDualRay", highs, has_dual_ray, dual_ray_value);
            }
            return (long)mh$.invokeExact(highs, has_dual_ray, dual_ray_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getDualUnboundednessDirection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getDualUnboundednessDirection");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getDualUnboundednessDirection(const void *highs, HighsInt *has_dual_unboundedness_direction, double *dual_unboundedness_direction_value)
     * }
     */
    public static FunctionDescriptor Highs_getDualUnboundednessDirection$descriptor() {
        return Highs_getDualUnboundednessDirection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getDualUnboundednessDirection(const void *highs, HighsInt *has_dual_unboundedness_direction, double *dual_unboundedness_direction_value)
     * }
     */
    public static MethodHandle Highs_getDualUnboundednessDirection$handle() {
        return Highs_getDualUnboundednessDirection.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getDualUnboundednessDirection(const void *highs, HighsInt *has_dual_unboundedness_direction, double *dual_unboundedness_direction_value)
     * }
     */
    public static MemorySegment Highs_getDualUnboundednessDirection$address() {
        return Highs_getDualUnboundednessDirection.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getDualUnboundednessDirection(const void *highs, HighsInt *has_dual_unboundedness_direction, double *dual_unboundedness_direction_value)
     * }
     */
    public static long Highs_getDualUnboundednessDirection(MemorySegment highs, MemorySegment has_dual_unboundedness_direction, MemorySegment dual_unboundedness_direction_value) {
        var mh$ = Highs_getDualUnboundednessDirection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getDualUnboundednessDirection", highs, has_dual_unboundedness_direction, dual_unboundedness_direction_value);
            }
            return (long)mh$.invokeExact(highs, has_dual_unboundedness_direction, dual_unboundedness_direction_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getPrimalRay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getPrimalRay");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getPrimalRay(const void *highs, HighsInt *has_primal_ray, double *primal_ray_value)
     * }
     */
    public static FunctionDescriptor Highs_getPrimalRay$descriptor() {
        return Highs_getPrimalRay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getPrimalRay(const void *highs, HighsInt *has_primal_ray, double *primal_ray_value)
     * }
     */
    public static MethodHandle Highs_getPrimalRay$handle() {
        return Highs_getPrimalRay.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getPrimalRay(const void *highs, HighsInt *has_primal_ray, double *primal_ray_value)
     * }
     */
    public static MemorySegment Highs_getPrimalRay$address() {
        return Highs_getPrimalRay.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getPrimalRay(const void *highs, HighsInt *has_primal_ray, double *primal_ray_value)
     * }
     */
    public static long Highs_getPrimalRay(MemorySegment highs, MemorySegment has_primal_ray, MemorySegment primal_ray_value) {
        var mh$ = Highs_getPrimalRay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getPrimalRay", highs, has_primal_ray, primal_ray_value);
            }
            return (long)mh$.invokeExact(highs, has_primal_ray, primal_ray_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getObjectiveValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_DOUBLE,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getObjectiveValue");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double Highs_getObjectiveValue(const void *highs)
     * }
     */
    public static FunctionDescriptor Highs_getObjectiveValue$descriptor() {
        return Highs_getObjectiveValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double Highs_getObjectiveValue(const void *highs)
     * }
     */
    public static MethodHandle Highs_getObjectiveValue$handle() {
        return Highs_getObjectiveValue.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double Highs_getObjectiveValue(const void *highs)
     * }
     */
    public static MemorySegment Highs_getObjectiveValue$address() {
        return Highs_getObjectiveValue.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double Highs_getObjectiveValue(const void *highs)
     * }
     */
    public static double Highs_getObjectiveValue(MemorySegment highs) {
        var mh$ = Highs_getObjectiveValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getObjectiveValue", highs);
            }
            return (double)mh$.invokeExact(highs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getBasicVariables {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getBasicVariables");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getBasicVariables(const void *highs, HighsInt *basic_variables)
     * }
     */
    public static FunctionDescriptor Highs_getBasicVariables$descriptor() {
        return Highs_getBasicVariables.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getBasicVariables(const void *highs, HighsInt *basic_variables)
     * }
     */
    public static MethodHandle Highs_getBasicVariables$handle() {
        return Highs_getBasicVariables.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getBasicVariables(const void *highs, HighsInt *basic_variables)
     * }
     */
    public static MemorySegment Highs_getBasicVariables$address() {
        return Highs_getBasicVariables.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getBasicVariables(const void *highs, HighsInt *basic_variables)
     * }
     */
    public static long Highs_getBasicVariables(MemorySegment highs, MemorySegment basic_variables) {
        var mh$ = Highs_getBasicVariables.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getBasicVariables", highs, basic_variables);
            }
            return (long)mh$.invokeExact(highs, basic_variables);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getBasisInverseRow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getBasisInverseRow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getBasisInverseRow(const void *highs, const HighsInt row, double *row_vector, HighsInt *row_num_nz, HighsInt *row_index)
     * }
     */
    public static FunctionDescriptor Highs_getBasisInverseRow$descriptor() {
        return Highs_getBasisInverseRow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getBasisInverseRow(const void *highs, const HighsInt row, double *row_vector, HighsInt *row_num_nz, HighsInt *row_index)
     * }
     */
    public static MethodHandle Highs_getBasisInverseRow$handle() {
        return Highs_getBasisInverseRow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getBasisInverseRow(const void *highs, const HighsInt row, double *row_vector, HighsInt *row_num_nz, HighsInt *row_index)
     * }
     */
    public static MemorySegment Highs_getBasisInverseRow$address() {
        return Highs_getBasisInverseRow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getBasisInverseRow(const void *highs, const HighsInt row, double *row_vector, HighsInt *row_num_nz, HighsInt *row_index)
     * }
     */
    public static long Highs_getBasisInverseRow(MemorySegment highs, long row, MemorySegment row_vector, MemorySegment row_num_nz, MemorySegment row_index) {
        var mh$ = Highs_getBasisInverseRow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getBasisInverseRow", highs, row, row_vector, row_num_nz, row_index);
            }
            return (long)mh$.invokeExact(highs, row, row_vector, row_num_nz, row_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getBasisInverseCol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getBasisInverseCol");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getBasisInverseCol(const void *highs, const HighsInt col, double *col_vector, HighsInt *col_num_nz, HighsInt *col_index)
     * }
     */
    public static FunctionDescriptor Highs_getBasisInverseCol$descriptor() {
        return Highs_getBasisInverseCol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getBasisInverseCol(const void *highs, const HighsInt col, double *col_vector, HighsInt *col_num_nz, HighsInt *col_index)
     * }
     */
    public static MethodHandle Highs_getBasisInverseCol$handle() {
        return Highs_getBasisInverseCol.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getBasisInverseCol(const void *highs, const HighsInt col, double *col_vector, HighsInt *col_num_nz, HighsInt *col_index)
     * }
     */
    public static MemorySegment Highs_getBasisInverseCol$address() {
        return Highs_getBasisInverseCol.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getBasisInverseCol(const void *highs, const HighsInt col, double *col_vector, HighsInt *col_num_nz, HighsInt *col_index)
     * }
     */
    public static long Highs_getBasisInverseCol(MemorySegment highs, long col, MemorySegment col_vector, MemorySegment col_num_nz, MemorySegment col_index) {
        var mh$ = Highs_getBasisInverseCol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getBasisInverseCol", highs, col, col_vector, col_num_nz, col_index);
            }
            return (long)mh$.invokeExact(highs, col, col_vector, col_num_nz, col_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getBasisSolve {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getBasisSolve");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getBasisSolve(const void *highs, const double *rhs, double *solution_vector, HighsInt *solution_num_nz, HighsInt *solution_index)
     * }
     */
    public static FunctionDescriptor Highs_getBasisSolve$descriptor() {
        return Highs_getBasisSolve.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getBasisSolve(const void *highs, const double *rhs, double *solution_vector, HighsInt *solution_num_nz, HighsInt *solution_index)
     * }
     */
    public static MethodHandle Highs_getBasisSolve$handle() {
        return Highs_getBasisSolve.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getBasisSolve(const void *highs, const double *rhs, double *solution_vector, HighsInt *solution_num_nz, HighsInt *solution_index)
     * }
     */
    public static MemorySegment Highs_getBasisSolve$address() {
        return Highs_getBasisSolve.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getBasisSolve(const void *highs, const double *rhs, double *solution_vector, HighsInt *solution_num_nz, HighsInt *solution_index)
     * }
     */
    public static long Highs_getBasisSolve(MemorySegment highs, MemorySegment rhs, MemorySegment solution_vector, MemorySegment solution_num_nz, MemorySegment solution_index) {
        var mh$ = Highs_getBasisSolve.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getBasisSolve", highs, rhs, solution_vector, solution_num_nz, solution_index);
            }
            return (long)mh$.invokeExact(highs, rhs, solution_vector, solution_num_nz, solution_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getBasisTransposeSolve {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getBasisTransposeSolve");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getBasisTransposeSolve(const void *highs, const double *rhs, double *solution_vector, HighsInt *solution_nz, HighsInt *solution_index)
     * }
     */
    public static FunctionDescriptor Highs_getBasisTransposeSolve$descriptor() {
        return Highs_getBasisTransposeSolve.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getBasisTransposeSolve(const void *highs, const double *rhs, double *solution_vector, HighsInt *solution_nz, HighsInt *solution_index)
     * }
     */
    public static MethodHandle Highs_getBasisTransposeSolve$handle() {
        return Highs_getBasisTransposeSolve.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getBasisTransposeSolve(const void *highs, const double *rhs, double *solution_vector, HighsInt *solution_nz, HighsInt *solution_index)
     * }
     */
    public static MemorySegment Highs_getBasisTransposeSolve$address() {
        return Highs_getBasisTransposeSolve.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getBasisTransposeSolve(const void *highs, const double *rhs, double *solution_vector, HighsInt *solution_nz, HighsInt *solution_index)
     * }
     */
    public static long Highs_getBasisTransposeSolve(MemorySegment highs, MemorySegment rhs, MemorySegment solution_vector, MemorySegment solution_nz, MemorySegment solution_index) {
        var mh$ = Highs_getBasisTransposeSolve.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getBasisTransposeSolve", highs, rhs, solution_vector, solution_nz, solution_index);
            }
            return (long)mh$.invokeExact(highs, rhs, solution_vector, solution_nz, solution_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getReducedRow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getReducedRow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getReducedRow(const void *highs, const HighsInt row, double *row_vector, HighsInt *row_num_nz, HighsInt *row_index)
     * }
     */
    public static FunctionDescriptor Highs_getReducedRow$descriptor() {
        return Highs_getReducedRow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getReducedRow(const void *highs, const HighsInt row, double *row_vector, HighsInt *row_num_nz, HighsInt *row_index)
     * }
     */
    public static MethodHandle Highs_getReducedRow$handle() {
        return Highs_getReducedRow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getReducedRow(const void *highs, const HighsInt row, double *row_vector, HighsInt *row_num_nz, HighsInt *row_index)
     * }
     */
    public static MemorySegment Highs_getReducedRow$address() {
        return Highs_getReducedRow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getReducedRow(const void *highs, const HighsInt row, double *row_vector, HighsInt *row_num_nz, HighsInt *row_index)
     * }
     */
    public static long Highs_getReducedRow(MemorySegment highs, long row, MemorySegment row_vector, MemorySegment row_num_nz, MemorySegment row_index) {
        var mh$ = Highs_getReducedRow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getReducedRow", highs, row, row_vector, row_num_nz, row_index);
            }
            return (long)mh$.invokeExact(highs, row, row_vector, row_num_nz, row_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getReducedColumn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getReducedColumn");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getReducedColumn(const void *highs, const HighsInt col, double *col_vector, HighsInt *col_num_nz, HighsInt *col_index)
     * }
     */
    public static FunctionDescriptor Highs_getReducedColumn$descriptor() {
        return Highs_getReducedColumn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getReducedColumn(const void *highs, const HighsInt col, double *col_vector, HighsInt *col_num_nz, HighsInt *col_index)
     * }
     */
    public static MethodHandle Highs_getReducedColumn$handle() {
        return Highs_getReducedColumn.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getReducedColumn(const void *highs, const HighsInt col, double *col_vector, HighsInt *col_num_nz, HighsInt *col_index)
     * }
     */
    public static MemorySegment Highs_getReducedColumn$address() {
        return Highs_getReducedColumn.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getReducedColumn(const void *highs, const HighsInt col, double *col_vector, HighsInt *col_num_nz, HighsInt *col_index)
     * }
     */
    public static long Highs_getReducedColumn(MemorySegment highs, long col, MemorySegment col_vector, MemorySegment col_num_nz, MemorySegment col_index) {
        var mh$ = Highs_getReducedColumn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getReducedColumn", highs, col, col_vector, col_num_nz, col_index);
            }
            return (long)mh$.invokeExact(highs, col, col_vector, col_num_nz, col_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_setBasis {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_setBasis");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_setBasis(void *highs, const HighsInt *col_status, const HighsInt *row_status)
     * }
     */
    public static FunctionDescriptor Highs_setBasis$descriptor() {
        return Highs_setBasis.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_setBasis(void *highs, const HighsInt *col_status, const HighsInt *row_status)
     * }
     */
    public static MethodHandle Highs_setBasis$handle() {
        return Highs_setBasis.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_setBasis(void *highs, const HighsInt *col_status, const HighsInt *row_status)
     * }
     */
    public static MemorySegment Highs_setBasis$address() {
        return Highs_setBasis.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_setBasis(void *highs, const HighsInt *col_status, const HighsInt *row_status)
     * }
     */
    public static long Highs_setBasis(MemorySegment highs, MemorySegment col_status, MemorySegment row_status) {
        var mh$ = Highs_setBasis.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_setBasis", highs, col_status, row_status);
            }
            return (long)mh$.invokeExact(highs, col_status, row_status);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_setLogicalBasis {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_setLogicalBasis");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_setLogicalBasis(void *highs)
     * }
     */
    public static FunctionDescriptor Highs_setLogicalBasis$descriptor() {
        return Highs_setLogicalBasis.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_setLogicalBasis(void *highs)
     * }
     */
    public static MethodHandle Highs_setLogicalBasis$handle() {
        return Highs_setLogicalBasis.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_setLogicalBasis(void *highs)
     * }
     */
    public static MemorySegment Highs_setLogicalBasis$address() {
        return Highs_setLogicalBasis.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_setLogicalBasis(void *highs)
     * }
     */
    public static long Highs_setLogicalBasis(MemorySegment highs) {
        var mh$ = Highs_setLogicalBasis.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_setLogicalBasis", highs);
            }
            return (long)mh$.invokeExact(highs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_setSolution {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_setSolution");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_setSolution(void *highs, const double *col_value, const double *row_value, const double *col_dual, const double *row_dual)
     * }
     */
    public static FunctionDescriptor Highs_setSolution$descriptor() {
        return Highs_setSolution.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_setSolution(void *highs, const double *col_value, const double *row_value, const double *col_dual, const double *row_dual)
     * }
     */
    public static MethodHandle Highs_setSolution$handle() {
        return Highs_setSolution.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_setSolution(void *highs, const double *col_value, const double *row_value, const double *col_dual, const double *row_dual)
     * }
     */
    public static MemorySegment Highs_setSolution$address() {
        return Highs_setSolution.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_setSolution(void *highs, const double *col_value, const double *row_value, const double *col_dual, const double *row_dual)
     * }
     */
    public static long Highs_setSolution(MemorySegment highs, MemorySegment col_value, MemorySegment row_value, MemorySegment col_dual, MemorySegment row_dual) {
        var mh$ = Highs_setSolution.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_setSolution", highs, col_value, row_value, col_dual, row_dual);
            }
            return (long)mh$.invokeExact(highs, col_value, row_value, col_dual, row_dual);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_setSparseSolution {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_setSparseSolution");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_setSparseSolution(void *highs, const HighsInt num_entries, const HighsInt *index, const double *value)
     * }
     */
    public static FunctionDescriptor Highs_setSparseSolution$descriptor() {
        return Highs_setSparseSolution.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_setSparseSolution(void *highs, const HighsInt num_entries, const HighsInt *index, const double *value)
     * }
     */
    public static MethodHandle Highs_setSparseSolution$handle() {
        return Highs_setSparseSolution.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_setSparseSolution(void *highs, const HighsInt num_entries, const HighsInt *index, const double *value)
     * }
     */
    public static MemorySegment Highs_setSparseSolution$address() {
        return Highs_setSparseSolution.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_setSparseSolution(void *highs, const HighsInt num_entries, const HighsInt *index, const double *value)
     * }
     */
    public static long Highs_setSparseSolution(MemorySegment highs, long num_entries, MemorySegment index, MemorySegment value) {
        var mh$ = Highs_setSparseSolution.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_setSparseSolution", highs, num_entries, index, value);
            }
            return (long)mh$.invokeExact(highs, num_entries, index, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_setCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_setCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_setCallback(void *highs, HighsCCallbackType user_callback, void *user_callback_data)
     * }
     */
    public static FunctionDescriptor Highs_setCallback$descriptor() {
        return Highs_setCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_setCallback(void *highs, HighsCCallbackType user_callback, void *user_callback_data)
     * }
     */
    public static MethodHandle Highs_setCallback$handle() {
        return Highs_setCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_setCallback(void *highs, HighsCCallbackType user_callback, void *user_callback_data)
     * }
     */
    public static MemorySegment Highs_setCallback$address() {
        return Highs_setCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_setCallback(void *highs, HighsCCallbackType user_callback, void *user_callback_data)
     * }
     */
    public static long Highs_setCallback(MemorySegment highs, MemorySegment user_callback, MemorySegment user_callback_data) {
        var mh$ = Highs_setCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_setCallback", highs, user_callback, user_callback_data);
            }
            return (long)mh$.invokeExact(highs, user_callback, user_callback_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_startCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_INT
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_startCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_startCallback(void *highs, const int callback_type)
     * }
     */
    public static FunctionDescriptor Highs_startCallback$descriptor() {
        return Highs_startCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_startCallback(void *highs, const int callback_type)
     * }
     */
    public static MethodHandle Highs_startCallback$handle() {
        return Highs_startCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_startCallback(void *highs, const int callback_type)
     * }
     */
    public static MemorySegment Highs_startCallback$address() {
        return Highs_startCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_startCallback(void *highs, const int callback_type)
     * }
     */
    public static long Highs_startCallback(MemorySegment highs, int callback_type) {
        var mh$ = Highs_startCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_startCallback", highs, callback_type);
            }
            return (long)mh$.invokeExact(highs, callback_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_stopCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_INT
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_stopCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_stopCallback(void *highs, const int callback_type)
     * }
     */
    public static FunctionDescriptor Highs_stopCallback$descriptor() {
        return Highs_stopCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_stopCallback(void *highs, const int callback_type)
     * }
     */
    public static MethodHandle Highs_stopCallback$handle() {
        return Highs_stopCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_stopCallback(void *highs, const int callback_type)
     * }
     */
    public static MemorySegment Highs_stopCallback$address() {
        return Highs_stopCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_stopCallback(void *highs, const int callback_type)
     * }
     */
    public static long Highs_stopCallback(MemorySegment highs, int callback_type) {
        var mh$ = Highs_stopCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_stopCallback", highs, callback_type);
            }
            return (long)mh$.invokeExact(highs, callback_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getRunTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_DOUBLE,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getRunTime");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double Highs_getRunTime(const void *highs)
     * }
     */
    public static FunctionDescriptor Highs_getRunTime$descriptor() {
        return Highs_getRunTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double Highs_getRunTime(const void *highs)
     * }
     */
    public static MethodHandle Highs_getRunTime$handle() {
        return Highs_getRunTime.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double Highs_getRunTime(const void *highs)
     * }
     */
    public static MemorySegment Highs_getRunTime$address() {
        return Highs_getRunTime.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double Highs_getRunTime(const void *highs)
     * }
     */
    public static double Highs_getRunTime(MemorySegment highs) {
        var mh$ = Highs_getRunTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getRunTime", highs);
            }
            return (double)mh$.invokeExact(highs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_zeroAllClocks {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_zeroAllClocks");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_zeroAllClocks(const void *highs)
     * }
     */
    public static FunctionDescriptor Highs_zeroAllClocks$descriptor() {
        return Highs_zeroAllClocks.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_zeroAllClocks(const void *highs)
     * }
     */
    public static MethodHandle Highs_zeroAllClocks$handle() {
        return Highs_zeroAllClocks.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_zeroAllClocks(const void *highs)
     * }
     */
    public static MemorySegment Highs_zeroAllClocks$address() {
        return Highs_zeroAllClocks.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_zeroAllClocks(const void *highs)
     * }
     */
    public static long Highs_zeroAllClocks(MemorySegment highs) {
        var mh$ = Highs_zeroAllClocks.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_zeroAllClocks", highs);
            }
            return (long)mh$.invokeExact(highs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_addCol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_DOUBLE,
            highs4j_c_api_h.C_DOUBLE,
            highs4j_c_api_h.C_DOUBLE,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_addCol");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_addCol(void *highs, const double cost, const double lower, const double upper, const HighsInt num_new_nz, const HighsInt *index, const double *value)
     * }
     */
    public static FunctionDescriptor Highs_addCol$descriptor() {
        return Highs_addCol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_addCol(void *highs, const double cost, const double lower, const double upper, const HighsInt num_new_nz, const HighsInt *index, const double *value)
     * }
     */
    public static MethodHandle Highs_addCol$handle() {
        return Highs_addCol.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_addCol(void *highs, const double cost, const double lower, const double upper, const HighsInt num_new_nz, const HighsInt *index, const double *value)
     * }
     */
    public static MemorySegment Highs_addCol$address() {
        return Highs_addCol.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_addCol(void *highs, const double cost, const double lower, const double upper, const HighsInt num_new_nz, const HighsInt *index, const double *value)
     * }
     */
    public static long Highs_addCol(MemorySegment highs, double cost, double lower, double upper, long num_new_nz, MemorySegment index, MemorySegment value) {
        var mh$ = Highs_addCol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_addCol", highs, cost, lower, upper, num_new_nz, index, value);
            }
            return (long)mh$.invokeExact(highs, cost, lower, upper, num_new_nz, index, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_addCols {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_addCols");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_addCols(void *highs, const HighsInt num_new_col, const double *costs, const double *lower, const double *upper, const HighsInt num_new_nz, const HighsInt *starts, const HighsInt *index, const double *value)
     * }
     */
    public static FunctionDescriptor Highs_addCols$descriptor() {
        return Highs_addCols.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_addCols(void *highs, const HighsInt num_new_col, const double *costs, const double *lower, const double *upper, const HighsInt num_new_nz, const HighsInt *starts, const HighsInt *index, const double *value)
     * }
     */
    public static MethodHandle Highs_addCols$handle() {
        return Highs_addCols.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_addCols(void *highs, const HighsInt num_new_col, const double *costs, const double *lower, const double *upper, const HighsInt num_new_nz, const HighsInt *starts, const HighsInt *index, const double *value)
     * }
     */
    public static MemorySegment Highs_addCols$address() {
        return Highs_addCols.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_addCols(void *highs, const HighsInt num_new_col, const double *costs, const double *lower, const double *upper, const HighsInt num_new_nz, const HighsInt *starts, const HighsInt *index, const double *value)
     * }
     */
    public static long Highs_addCols(MemorySegment highs, long num_new_col, MemorySegment costs, MemorySegment lower, MemorySegment upper, long num_new_nz, MemorySegment starts, MemorySegment index, MemorySegment value) {
        var mh$ = Highs_addCols.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_addCols", highs, num_new_col, costs, lower, upper, num_new_nz, starts, index, value);
            }
            return (long)mh$.invokeExact(highs, num_new_col, costs, lower, upper, num_new_nz, starts, index, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_addVar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_DOUBLE,
            highs4j_c_api_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_addVar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_addVar(void *highs, const double lower, const double upper)
     * }
     */
    public static FunctionDescriptor Highs_addVar$descriptor() {
        return Highs_addVar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_addVar(void *highs, const double lower, const double upper)
     * }
     */
    public static MethodHandle Highs_addVar$handle() {
        return Highs_addVar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_addVar(void *highs, const double lower, const double upper)
     * }
     */
    public static MemorySegment Highs_addVar$address() {
        return Highs_addVar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_addVar(void *highs, const double lower, const double upper)
     * }
     */
    public static long Highs_addVar(MemorySegment highs, double lower, double upper) {
        var mh$ = Highs_addVar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_addVar", highs, lower, upper);
            }
            return (long)mh$.invokeExact(highs, lower, upper);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_addVars {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_addVars");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_addVars(void *highs, const HighsInt num_new_var, const double *lower, const double *upper)
     * }
     */
    public static FunctionDescriptor Highs_addVars$descriptor() {
        return Highs_addVars.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_addVars(void *highs, const HighsInt num_new_var, const double *lower, const double *upper)
     * }
     */
    public static MethodHandle Highs_addVars$handle() {
        return Highs_addVars.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_addVars(void *highs, const HighsInt num_new_var, const double *lower, const double *upper)
     * }
     */
    public static MemorySegment Highs_addVars$address() {
        return Highs_addVars.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_addVars(void *highs, const HighsInt num_new_var, const double *lower, const double *upper)
     * }
     */
    public static long Highs_addVars(MemorySegment highs, long num_new_var, MemorySegment lower, MemorySegment upper) {
        var mh$ = Highs_addVars.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_addVars", highs, num_new_var, lower, upper);
            }
            return (long)mh$.invokeExact(highs, num_new_var, lower, upper);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_addRow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_DOUBLE,
            highs4j_c_api_h.C_DOUBLE,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_addRow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_addRow(void *highs, const double lower, const double upper, const HighsInt num_new_nz, const HighsInt *index, const double *value)
     * }
     */
    public static FunctionDescriptor Highs_addRow$descriptor() {
        return Highs_addRow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_addRow(void *highs, const double lower, const double upper, const HighsInt num_new_nz, const HighsInt *index, const double *value)
     * }
     */
    public static MethodHandle Highs_addRow$handle() {
        return Highs_addRow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_addRow(void *highs, const double lower, const double upper, const HighsInt num_new_nz, const HighsInt *index, const double *value)
     * }
     */
    public static MemorySegment Highs_addRow$address() {
        return Highs_addRow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_addRow(void *highs, const double lower, const double upper, const HighsInt num_new_nz, const HighsInt *index, const double *value)
     * }
     */
    public static long Highs_addRow(MemorySegment highs, double lower, double upper, long num_new_nz, MemorySegment index, MemorySegment value) {
        var mh$ = Highs_addRow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_addRow", highs, lower, upper, num_new_nz, index, value);
            }
            return (long)mh$.invokeExact(highs, lower, upper, num_new_nz, index, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_addRows {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_addRows");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_addRows(void *highs, const HighsInt num_new_row, const double *lower, const double *upper, const HighsInt num_new_nz, const HighsInt *starts, const HighsInt *index, const double *value)
     * }
     */
    public static FunctionDescriptor Highs_addRows$descriptor() {
        return Highs_addRows.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_addRows(void *highs, const HighsInt num_new_row, const double *lower, const double *upper, const HighsInt num_new_nz, const HighsInt *starts, const HighsInt *index, const double *value)
     * }
     */
    public static MethodHandle Highs_addRows$handle() {
        return Highs_addRows.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_addRows(void *highs, const HighsInt num_new_row, const double *lower, const double *upper, const HighsInt num_new_nz, const HighsInt *starts, const HighsInt *index, const double *value)
     * }
     */
    public static MemorySegment Highs_addRows$address() {
        return Highs_addRows.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_addRows(void *highs, const HighsInt num_new_row, const double *lower, const double *upper, const HighsInt num_new_nz, const HighsInt *starts, const HighsInt *index, const double *value)
     * }
     */
    public static long Highs_addRows(MemorySegment highs, long num_new_row, MemorySegment lower, MemorySegment upper, long num_new_nz, MemorySegment starts, MemorySegment index, MemorySegment value) {
        var mh$ = Highs_addRows.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_addRows", highs, num_new_row, lower, upper, num_new_nz, starts, index, value);
            }
            return (long)mh$.invokeExact(highs, num_new_row, lower, upper, num_new_nz, starts, index, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_changeObjectiveSense {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_changeObjectiveSense");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_changeObjectiveSense(void *highs, const HighsInt sense)
     * }
     */
    public static FunctionDescriptor Highs_changeObjectiveSense$descriptor() {
        return Highs_changeObjectiveSense.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_changeObjectiveSense(void *highs, const HighsInt sense)
     * }
     */
    public static MethodHandle Highs_changeObjectiveSense$handle() {
        return Highs_changeObjectiveSense.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_changeObjectiveSense(void *highs, const HighsInt sense)
     * }
     */
    public static MemorySegment Highs_changeObjectiveSense$address() {
        return Highs_changeObjectiveSense.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_changeObjectiveSense(void *highs, const HighsInt sense)
     * }
     */
    public static long Highs_changeObjectiveSense(MemorySegment highs, long sense) {
        var mh$ = Highs_changeObjectiveSense.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_changeObjectiveSense", highs, sense);
            }
            return (long)mh$.invokeExact(highs, sense);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_changeObjectiveOffset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_changeObjectiveOffset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_changeObjectiveOffset(void *highs, const double offset)
     * }
     */
    public static FunctionDescriptor Highs_changeObjectiveOffset$descriptor() {
        return Highs_changeObjectiveOffset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_changeObjectiveOffset(void *highs, const double offset)
     * }
     */
    public static MethodHandle Highs_changeObjectiveOffset$handle() {
        return Highs_changeObjectiveOffset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_changeObjectiveOffset(void *highs, const double offset)
     * }
     */
    public static MemorySegment Highs_changeObjectiveOffset$address() {
        return Highs_changeObjectiveOffset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_changeObjectiveOffset(void *highs, const double offset)
     * }
     */
    public static long Highs_changeObjectiveOffset(MemorySegment highs, double offset) {
        var mh$ = Highs_changeObjectiveOffset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_changeObjectiveOffset", highs, offset);
            }
            return (long)mh$.invokeExact(highs, offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_changeColIntegrality {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_changeColIntegrality");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_changeColIntegrality(void *highs, const HighsInt col, const HighsInt integrality)
     * }
     */
    public static FunctionDescriptor Highs_changeColIntegrality$descriptor() {
        return Highs_changeColIntegrality.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_changeColIntegrality(void *highs, const HighsInt col, const HighsInt integrality)
     * }
     */
    public static MethodHandle Highs_changeColIntegrality$handle() {
        return Highs_changeColIntegrality.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_changeColIntegrality(void *highs, const HighsInt col, const HighsInt integrality)
     * }
     */
    public static MemorySegment Highs_changeColIntegrality$address() {
        return Highs_changeColIntegrality.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_changeColIntegrality(void *highs, const HighsInt col, const HighsInt integrality)
     * }
     */
    public static long Highs_changeColIntegrality(MemorySegment highs, long col, long integrality) {
        var mh$ = Highs_changeColIntegrality.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_changeColIntegrality", highs, col, integrality);
            }
            return (long)mh$.invokeExact(highs, col, integrality);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_changeColsIntegralityByRange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_changeColsIntegralityByRange");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_changeColsIntegralityByRange(void *highs, const HighsInt from_col, const HighsInt to_col, const HighsInt *integrality)
     * }
     */
    public static FunctionDescriptor Highs_changeColsIntegralityByRange$descriptor() {
        return Highs_changeColsIntegralityByRange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_changeColsIntegralityByRange(void *highs, const HighsInt from_col, const HighsInt to_col, const HighsInt *integrality)
     * }
     */
    public static MethodHandle Highs_changeColsIntegralityByRange$handle() {
        return Highs_changeColsIntegralityByRange.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_changeColsIntegralityByRange(void *highs, const HighsInt from_col, const HighsInt to_col, const HighsInt *integrality)
     * }
     */
    public static MemorySegment Highs_changeColsIntegralityByRange$address() {
        return Highs_changeColsIntegralityByRange.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_changeColsIntegralityByRange(void *highs, const HighsInt from_col, const HighsInt to_col, const HighsInt *integrality)
     * }
     */
    public static long Highs_changeColsIntegralityByRange(MemorySegment highs, long from_col, long to_col, MemorySegment integrality) {
        var mh$ = Highs_changeColsIntegralityByRange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_changeColsIntegralityByRange", highs, from_col, to_col, integrality);
            }
            return (long)mh$.invokeExact(highs, from_col, to_col, integrality);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_changeColsIntegralityBySet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_changeColsIntegralityBySet");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_changeColsIntegralityBySet(void *highs, const HighsInt num_set_entries, const HighsInt *set, const HighsInt *integrality)
     * }
     */
    public static FunctionDescriptor Highs_changeColsIntegralityBySet$descriptor() {
        return Highs_changeColsIntegralityBySet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_changeColsIntegralityBySet(void *highs, const HighsInt num_set_entries, const HighsInt *set, const HighsInt *integrality)
     * }
     */
    public static MethodHandle Highs_changeColsIntegralityBySet$handle() {
        return Highs_changeColsIntegralityBySet.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_changeColsIntegralityBySet(void *highs, const HighsInt num_set_entries, const HighsInt *set, const HighsInt *integrality)
     * }
     */
    public static MemorySegment Highs_changeColsIntegralityBySet$address() {
        return Highs_changeColsIntegralityBySet.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_changeColsIntegralityBySet(void *highs, const HighsInt num_set_entries, const HighsInt *set, const HighsInt *integrality)
     * }
     */
    public static long Highs_changeColsIntegralityBySet(MemorySegment highs, long num_set_entries, MemorySegment set, MemorySegment integrality) {
        var mh$ = Highs_changeColsIntegralityBySet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_changeColsIntegralityBySet", highs, num_set_entries, set, integrality);
            }
            return (long)mh$.invokeExact(highs, num_set_entries, set, integrality);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_changeColsIntegralityByMask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_changeColsIntegralityByMask");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_changeColsIntegralityByMask(void *highs, const HighsInt *mask, const HighsInt *integrality)
     * }
     */
    public static FunctionDescriptor Highs_changeColsIntegralityByMask$descriptor() {
        return Highs_changeColsIntegralityByMask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_changeColsIntegralityByMask(void *highs, const HighsInt *mask, const HighsInt *integrality)
     * }
     */
    public static MethodHandle Highs_changeColsIntegralityByMask$handle() {
        return Highs_changeColsIntegralityByMask.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_changeColsIntegralityByMask(void *highs, const HighsInt *mask, const HighsInt *integrality)
     * }
     */
    public static MemorySegment Highs_changeColsIntegralityByMask$address() {
        return Highs_changeColsIntegralityByMask.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_changeColsIntegralityByMask(void *highs, const HighsInt *mask, const HighsInt *integrality)
     * }
     */
    public static long Highs_changeColsIntegralityByMask(MemorySegment highs, MemorySegment mask, MemorySegment integrality) {
        var mh$ = Highs_changeColsIntegralityByMask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_changeColsIntegralityByMask", highs, mask, integrality);
            }
            return (long)mh$.invokeExact(highs, mask, integrality);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_clearIntegrality {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_clearIntegrality");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_clearIntegrality(void *highs)
     * }
     */
    public static FunctionDescriptor Highs_clearIntegrality$descriptor() {
        return Highs_clearIntegrality.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_clearIntegrality(void *highs)
     * }
     */
    public static MethodHandle Highs_clearIntegrality$handle() {
        return Highs_clearIntegrality.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_clearIntegrality(void *highs)
     * }
     */
    public static MemorySegment Highs_clearIntegrality$address() {
        return Highs_clearIntegrality.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_clearIntegrality(void *highs)
     * }
     */
    public static long Highs_clearIntegrality(MemorySegment highs) {
        var mh$ = Highs_clearIntegrality.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_clearIntegrality", highs);
            }
            return (long)mh$.invokeExact(highs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_changeColCost {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_changeColCost");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_changeColCost(void *highs, const HighsInt col, const double cost)
     * }
     */
    public static FunctionDescriptor Highs_changeColCost$descriptor() {
        return Highs_changeColCost.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_changeColCost(void *highs, const HighsInt col, const double cost)
     * }
     */
    public static MethodHandle Highs_changeColCost$handle() {
        return Highs_changeColCost.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_changeColCost(void *highs, const HighsInt col, const double cost)
     * }
     */
    public static MemorySegment Highs_changeColCost$address() {
        return Highs_changeColCost.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_changeColCost(void *highs, const HighsInt col, const double cost)
     * }
     */
    public static long Highs_changeColCost(MemorySegment highs, long col, double cost) {
        var mh$ = Highs_changeColCost.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_changeColCost", highs, col, cost);
            }
            return (long)mh$.invokeExact(highs, col, cost);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_changeColsCostByRange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_changeColsCostByRange");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_changeColsCostByRange(void *highs, const HighsInt from_col, const HighsInt to_col, const double *cost)
     * }
     */
    public static FunctionDescriptor Highs_changeColsCostByRange$descriptor() {
        return Highs_changeColsCostByRange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_changeColsCostByRange(void *highs, const HighsInt from_col, const HighsInt to_col, const double *cost)
     * }
     */
    public static MethodHandle Highs_changeColsCostByRange$handle() {
        return Highs_changeColsCostByRange.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_changeColsCostByRange(void *highs, const HighsInt from_col, const HighsInt to_col, const double *cost)
     * }
     */
    public static MemorySegment Highs_changeColsCostByRange$address() {
        return Highs_changeColsCostByRange.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_changeColsCostByRange(void *highs, const HighsInt from_col, const HighsInt to_col, const double *cost)
     * }
     */
    public static long Highs_changeColsCostByRange(MemorySegment highs, long from_col, long to_col, MemorySegment cost) {
        var mh$ = Highs_changeColsCostByRange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_changeColsCostByRange", highs, from_col, to_col, cost);
            }
            return (long)mh$.invokeExact(highs, from_col, to_col, cost);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_changeColsCostBySet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_changeColsCostBySet");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_changeColsCostBySet(void *highs, const HighsInt num_set_entries, const HighsInt *set, const double *cost)
     * }
     */
    public static FunctionDescriptor Highs_changeColsCostBySet$descriptor() {
        return Highs_changeColsCostBySet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_changeColsCostBySet(void *highs, const HighsInt num_set_entries, const HighsInt *set, const double *cost)
     * }
     */
    public static MethodHandle Highs_changeColsCostBySet$handle() {
        return Highs_changeColsCostBySet.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_changeColsCostBySet(void *highs, const HighsInt num_set_entries, const HighsInt *set, const double *cost)
     * }
     */
    public static MemorySegment Highs_changeColsCostBySet$address() {
        return Highs_changeColsCostBySet.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_changeColsCostBySet(void *highs, const HighsInt num_set_entries, const HighsInt *set, const double *cost)
     * }
     */
    public static long Highs_changeColsCostBySet(MemorySegment highs, long num_set_entries, MemorySegment set, MemorySegment cost) {
        var mh$ = Highs_changeColsCostBySet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_changeColsCostBySet", highs, num_set_entries, set, cost);
            }
            return (long)mh$.invokeExact(highs, num_set_entries, set, cost);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_changeColsCostByMask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_changeColsCostByMask");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_changeColsCostByMask(void *highs, const HighsInt *mask, const double *cost)
     * }
     */
    public static FunctionDescriptor Highs_changeColsCostByMask$descriptor() {
        return Highs_changeColsCostByMask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_changeColsCostByMask(void *highs, const HighsInt *mask, const double *cost)
     * }
     */
    public static MethodHandle Highs_changeColsCostByMask$handle() {
        return Highs_changeColsCostByMask.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_changeColsCostByMask(void *highs, const HighsInt *mask, const double *cost)
     * }
     */
    public static MemorySegment Highs_changeColsCostByMask$address() {
        return Highs_changeColsCostByMask.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_changeColsCostByMask(void *highs, const HighsInt *mask, const double *cost)
     * }
     */
    public static long Highs_changeColsCostByMask(MemorySegment highs, MemorySegment mask, MemorySegment cost) {
        var mh$ = Highs_changeColsCostByMask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_changeColsCostByMask", highs, mask, cost);
            }
            return (long)mh$.invokeExact(highs, mask, cost);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_changeColBounds {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_DOUBLE,
            highs4j_c_api_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_changeColBounds");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_changeColBounds(void *highs, const HighsInt col, const double lower, const double upper)
     * }
     */
    public static FunctionDescriptor Highs_changeColBounds$descriptor() {
        return Highs_changeColBounds.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_changeColBounds(void *highs, const HighsInt col, const double lower, const double upper)
     * }
     */
    public static MethodHandle Highs_changeColBounds$handle() {
        return Highs_changeColBounds.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_changeColBounds(void *highs, const HighsInt col, const double lower, const double upper)
     * }
     */
    public static MemorySegment Highs_changeColBounds$address() {
        return Highs_changeColBounds.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_changeColBounds(void *highs, const HighsInt col, const double lower, const double upper)
     * }
     */
    public static long Highs_changeColBounds(MemorySegment highs, long col, double lower, double upper) {
        var mh$ = Highs_changeColBounds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_changeColBounds", highs, col, lower, upper);
            }
            return (long)mh$.invokeExact(highs, col, lower, upper);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_changeColsBoundsByRange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_changeColsBoundsByRange");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_changeColsBoundsByRange(void *highs, const HighsInt from_col, const HighsInt to_col, const double *lower, const double *upper)
     * }
     */
    public static FunctionDescriptor Highs_changeColsBoundsByRange$descriptor() {
        return Highs_changeColsBoundsByRange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_changeColsBoundsByRange(void *highs, const HighsInt from_col, const HighsInt to_col, const double *lower, const double *upper)
     * }
     */
    public static MethodHandle Highs_changeColsBoundsByRange$handle() {
        return Highs_changeColsBoundsByRange.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_changeColsBoundsByRange(void *highs, const HighsInt from_col, const HighsInt to_col, const double *lower, const double *upper)
     * }
     */
    public static MemorySegment Highs_changeColsBoundsByRange$address() {
        return Highs_changeColsBoundsByRange.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_changeColsBoundsByRange(void *highs, const HighsInt from_col, const HighsInt to_col, const double *lower, const double *upper)
     * }
     */
    public static long Highs_changeColsBoundsByRange(MemorySegment highs, long from_col, long to_col, MemorySegment lower, MemorySegment upper) {
        var mh$ = Highs_changeColsBoundsByRange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_changeColsBoundsByRange", highs, from_col, to_col, lower, upper);
            }
            return (long)mh$.invokeExact(highs, from_col, to_col, lower, upper);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_changeColsBoundsBySet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_changeColsBoundsBySet");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_changeColsBoundsBySet(void *highs, const HighsInt num_set_entries, const HighsInt *set, const double *lower, const double *upper)
     * }
     */
    public static FunctionDescriptor Highs_changeColsBoundsBySet$descriptor() {
        return Highs_changeColsBoundsBySet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_changeColsBoundsBySet(void *highs, const HighsInt num_set_entries, const HighsInt *set, const double *lower, const double *upper)
     * }
     */
    public static MethodHandle Highs_changeColsBoundsBySet$handle() {
        return Highs_changeColsBoundsBySet.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_changeColsBoundsBySet(void *highs, const HighsInt num_set_entries, const HighsInt *set, const double *lower, const double *upper)
     * }
     */
    public static MemorySegment Highs_changeColsBoundsBySet$address() {
        return Highs_changeColsBoundsBySet.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_changeColsBoundsBySet(void *highs, const HighsInt num_set_entries, const HighsInt *set, const double *lower, const double *upper)
     * }
     */
    public static long Highs_changeColsBoundsBySet(MemorySegment highs, long num_set_entries, MemorySegment set, MemorySegment lower, MemorySegment upper) {
        var mh$ = Highs_changeColsBoundsBySet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_changeColsBoundsBySet", highs, num_set_entries, set, lower, upper);
            }
            return (long)mh$.invokeExact(highs, num_set_entries, set, lower, upper);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_changeColsBoundsByMask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_changeColsBoundsByMask");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_changeColsBoundsByMask(void *highs, const HighsInt *mask, const double *lower, const double *upper)
     * }
     */
    public static FunctionDescriptor Highs_changeColsBoundsByMask$descriptor() {
        return Highs_changeColsBoundsByMask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_changeColsBoundsByMask(void *highs, const HighsInt *mask, const double *lower, const double *upper)
     * }
     */
    public static MethodHandle Highs_changeColsBoundsByMask$handle() {
        return Highs_changeColsBoundsByMask.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_changeColsBoundsByMask(void *highs, const HighsInt *mask, const double *lower, const double *upper)
     * }
     */
    public static MemorySegment Highs_changeColsBoundsByMask$address() {
        return Highs_changeColsBoundsByMask.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_changeColsBoundsByMask(void *highs, const HighsInt *mask, const double *lower, const double *upper)
     * }
     */
    public static long Highs_changeColsBoundsByMask(MemorySegment highs, MemorySegment mask, MemorySegment lower, MemorySegment upper) {
        var mh$ = Highs_changeColsBoundsByMask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_changeColsBoundsByMask", highs, mask, lower, upper);
            }
            return (long)mh$.invokeExact(highs, mask, lower, upper);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_changeRowBounds {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_DOUBLE,
            highs4j_c_api_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_changeRowBounds");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_changeRowBounds(void *highs, const HighsInt row, const double lower, const double upper)
     * }
     */
    public static FunctionDescriptor Highs_changeRowBounds$descriptor() {
        return Highs_changeRowBounds.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_changeRowBounds(void *highs, const HighsInt row, const double lower, const double upper)
     * }
     */
    public static MethodHandle Highs_changeRowBounds$handle() {
        return Highs_changeRowBounds.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_changeRowBounds(void *highs, const HighsInt row, const double lower, const double upper)
     * }
     */
    public static MemorySegment Highs_changeRowBounds$address() {
        return Highs_changeRowBounds.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_changeRowBounds(void *highs, const HighsInt row, const double lower, const double upper)
     * }
     */
    public static long Highs_changeRowBounds(MemorySegment highs, long row, double lower, double upper) {
        var mh$ = Highs_changeRowBounds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_changeRowBounds", highs, row, lower, upper);
            }
            return (long)mh$.invokeExact(highs, row, lower, upper);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_changeRowsBoundsBySet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_changeRowsBoundsBySet");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_changeRowsBoundsBySet(void *highs, const HighsInt num_set_entries, const HighsInt *set, const double *lower, const double *upper)
     * }
     */
    public static FunctionDescriptor Highs_changeRowsBoundsBySet$descriptor() {
        return Highs_changeRowsBoundsBySet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_changeRowsBoundsBySet(void *highs, const HighsInt num_set_entries, const HighsInt *set, const double *lower, const double *upper)
     * }
     */
    public static MethodHandle Highs_changeRowsBoundsBySet$handle() {
        return Highs_changeRowsBoundsBySet.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_changeRowsBoundsBySet(void *highs, const HighsInt num_set_entries, const HighsInt *set, const double *lower, const double *upper)
     * }
     */
    public static MemorySegment Highs_changeRowsBoundsBySet$address() {
        return Highs_changeRowsBoundsBySet.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_changeRowsBoundsBySet(void *highs, const HighsInt num_set_entries, const HighsInt *set, const double *lower, const double *upper)
     * }
     */
    public static long Highs_changeRowsBoundsBySet(MemorySegment highs, long num_set_entries, MemorySegment set, MemorySegment lower, MemorySegment upper) {
        var mh$ = Highs_changeRowsBoundsBySet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_changeRowsBoundsBySet", highs, num_set_entries, set, lower, upper);
            }
            return (long)mh$.invokeExact(highs, num_set_entries, set, lower, upper);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_changeRowsBoundsByMask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_changeRowsBoundsByMask");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_changeRowsBoundsByMask(void *highs, const HighsInt *mask, const double *lower, const double *upper)
     * }
     */
    public static FunctionDescriptor Highs_changeRowsBoundsByMask$descriptor() {
        return Highs_changeRowsBoundsByMask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_changeRowsBoundsByMask(void *highs, const HighsInt *mask, const double *lower, const double *upper)
     * }
     */
    public static MethodHandle Highs_changeRowsBoundsByMask$handle() {
        return Highs_changeRowsBoundsByMask.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_changeRowsBoundsByMask(void *highs, const HighsInt *mask, const double *lower, const double *upper)
     * }
     */
    public static MemorySegment Highs_changeRowsBoundsByMask$address() {
        return Highs_changeRowsBoundsByMask.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_changeRowsBoundsByMask(void *highs, const HighsInt *mask, const double *lower, const double *upper)
     * }
     */
    public static long Highs_changeRowsBoundsByMask(MemorySegment highs, MemorySegment mask, MemorySegment lower, MemorySegment upper) {
        var mh$ = Highs_changeRowsBoundsByMask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_changeRowsBoundsByMask", highs, mask, lower, upper);
            }
            return (long)mh$.invokeExact(highs, mask, lower, upper);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_changeCoeff {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_changeCoeff");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_changeCoeff(void *highs, const HighsInt row, const HighsInt col, const double value)
     * }
     */
    public static FunctionDescriptor Highs_changeCoeff$descriptor() {
        return Highs_changeCoeff.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_changeCoeff(void *highs, const HighsInt row, const HighsInt col, const double value)
     * }
     */
    public static MethodHandle Highs_changeCoeff$handle() {
        return Highs_changeCoeff.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_changeCoeff(void *highs, const HighsInt row, const HighsInt col, const double value)
     * }
     */
    public static MemorySegment Highs_changeCoeff$address() {
        return Highs_changeCoeff.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_changeCoeff(void *highs, const HighsInt row, const HighsInt col, const double value)
     * }
     */
    public static long Highs_changeCoeff(MemorySegment highs, long row, long col, double value) {
        var mh$ = Highs_changeCoeff.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_changeCoeff", highs, row, col, value);
            }
            return (long)mh$.invokeExact(highs, row, col, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getObjectiveSense {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getObjectiveSense");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getObjectiveSense(const void *highs, HighsInt *sense)
     * }
     */
    public static FunctionDescriptor Highs_getObjectiveSense$descriptor() {
        return Highs_getObjectiveSense.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getObjectiveSense(const void *highs, HighsInt *sense)
     * }
     */
    public static MethodHandle Highs_getObjectiveSense$handle() {
        return Highs_getObjectiveSense.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getObjectiveSense(const void *highs, HighsInt *sense)
     * }
     */
    public static MemorySegment Highs_getObjectiveSense$address() {
        return Highs_getObjectiveSense.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getObjectiveSense(const void *highs, HighsInt *sense)
     * }
     */
    public static long Highs_getObjectiveSense(MemorySegment highs, MemorySegment sense) {
        var mh$ = Highs_getObjectiveSense.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getObjectiveSense", highs, sense);
            }
            return (long)mh$.invokeExact(highs, sense);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getObjectiveOffset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getObjectiveOffset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getObjectiveOffset(const void *highs, double *offset)
     * }
     */
    public static FunctionDescriptor Highs_getObjectiveOffset$descriptor() {
        return Highs_getObjectiveOffset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getObjectiveOffset(const void *highs, double *offset)
     * }
     */
    public static MethodHandle Highs_getObjectiveOffset$handle() {
        return Highs_getObjectiveOffset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getObjectiveOffset(const void *highs, double *offset)
     * }
     */
    public static MemorySegment Highs_getObjectiveOffset$address() {
        return Highs_getObjectiveOffset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getObjectiveOffset(const void *highs, double *offset)
     * }
     */
    public static long Highs_getObjectiveOffset(MemorySegment highs, MemorySegment offset) {
        var mh$ = Highs_getObjectiveOffset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getObjectiveOffset", highs, offset);
            }
            return (long)mh$.invokeExact(highs, offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getColsByRange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getColsByRange");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getColsByRange(const void *highs, const HighsInt from_col, const HighsInt to_col, HighsInt *num_col, double *costs, double *lower, double *upper, HighsInt *num_nz, HighsInt *matrix_start, HighsInt *matrix_index, double *matrix_value)
     * }
     */
    public static FunctionDescriptor Highs_getColsByRange$descriptor() {
        return Highs_getColsByRange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getColsByRange(const void *highs, const HighsInt from_col, const HighsInt to_col, HighsInt *num_col, double *costs, double *lower, double *upper, HighsInt *num_nz, HighsInt *matrix_start, HighsInt *matrix_index, double *matrix_value)
     * }
     */
    public static MethodHandle Highs_getColsByRange$handle() {
        return Highs_getColsByRange.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getColsByRange(const void *highs, const HighsInt from_col, const HighsInt to_col, HighsInt *num_col, double *costs, double *lower, double *upper, HighsInt *num_nz, HighsInt *matrix_start, HighsInt *matrix_index, double *matrix_value)
     * }
     */
    public static MemorySegment Highs_getColsByRange$address() {
        return Highs_getColsByRange.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getColsByRange(const void *highs, const HighsInt from_col, const HighsInt to_col, HighsInt *num_col, double *costs, double *lower, double *upper, HighsInt *num_nz, HighsInt *matrix_start, HighsInt *matrix_index, double *matrix_value)
     * }
     */
    public static long Highs_getColsByRange(MemorySegment highs, long from_col, long to_col, MemorySegment num_col, MemorySegment costs, MemorySegment lower, MemorySegment upper, MemorySegment num_nz, MemorySegment matrix_start, MemorySegment matrix_index, MemorySegment matrix_value) {
        var mh$ = Highs_getColsByRange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getColsByRange", highs, from_col, to_col, num_col, costs, lower, upper, num_nz, matrix_start, matrix_index, matrix_value);
            }
            return (long)mh$.invokeExact(highs, from_col, to_col, num_col, costs, lower, upper, num_nz, matrix_start, matrix_index, matrix_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getColsBySet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getColsBySet");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getColsBySet(const void *highs, const HighsInt num_set_entries, const HighsInt *set, HighsInt *num_col, double *costs, double *lower, double *upper, HighsInt *num_nz, HighsInt *matrix_start, HighsInt *matrix_index, double *matrix_value)
     * }
     */
    public static FunctionDescriptor Highs_getColsBySet$descriptor() {
        return Highs_getColsBySet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getColsBySet(const void *highs, const HighsInt num_set_entries, const HighsInt *set, HighsInt *num_col, double *costs, double *lower, double *upper, HighsInt *num_nz, HighsInt *matrix_start, HighsInt *matrix_index, double *matrix_value)
     * }
     */
    public static MethodHandle Highs_getColsBySet$handle() {
        return Highs_getColsBySet.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getColsBySet(const void *highs, const HighsInt num_set_entries, const HighsInt *set, HighsInt *num_col, double *costs, double *lower, double *upper, HighsInt *num_nz, HighsInt *matrix_start, HighsInt *matrix_index, double *matrix_value)
     * }
     */
    public static MemorySegment Highs_getColsBySet$address() {
        return Highs_getColsBySet.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getColsBySet(const void *highs, const HighsInt num_set_entries, const HighsInt *set, HighsInt *num_col, double *costs, double *lower, double *upper, HighsInt *num_nz, HighsInt *matrix_start, HighsInt *matrix_index, double *matrix_value)
     * }
     */
    public static long Highs_getColsBySet(MemorySegment highs, long num_set_entries, MemorySegment set, MemorySegment num_col, MemorySegment costs, MemorySegment lower, MemorySegment upper, MemorySegment num_nz, MemorySegment matrix_start, MemorySegment matrix_index, MemorySegment matrix_value) {
        var mh$ = Highs_getColsBySet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getColsBySet", highs, num_set_entries, set, num_col, costs, lower, upper, num_nz, matrix_start, matrix_index, matrix_value);
            }
            return (long)mh$.invokeExact(highs, num_set_entries, set, num_col, costs, lower, upper, num_nz, matrix_start, matrix_index, matrix_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getColsByMask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getColsByMask");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getColsByMask(const void *highs, const HighsInt *mask, HighsInt *num_col, double *costs, double *lower, double *upper, HighsInt *num_nz, HighsInt *matrix_start, HighsInt *matrix_index, double *matrix_value)
     * }
     */
    public static FunctionDescriptor Highs_getColsByMask$descriptor() {
        return Highs_getColsByMask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getColsByMask(const void *highs, const HighsInt *mask, HighsInt *num_col, double *costs, double *lower, double *upper, HighsInt *num_nz, HighsInt *matrix_start, HighsInt *matrix_index, double *matrix_value)
     * }
     */
    public static MethodHandle Highs_getColsByMask$handle() {
        return Highs_getColsByMask.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getColsByMask(const void *highs, const HighsInt *mask, HighsInt *num_col, double *costs, double *lower, double *upper, HighsInt *num_nz, HighsInt *matrix_start, HighsInt *matrix_index, double *matrix_value)
     * }
     */
    public static MemorySegment Highs_getColsByMask$address() {
        return Highs_getColsByMask.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getColsByMask(const void *highs, const HighsInt *mask, HighsInt *num_col, double *costs, double *lower, double *upper, HighsInt *num_nz, HighsInt *matrix_start, HighsInt *matrix_index, double *matrix_value)
     * }
     */
    public static long Highs_getColsByMask(MemorySegment highs, MemorySegment mask, MemorySegment num_col, MemorySegment costs, MemorySegment lower, MemorySegment upper, MemorySegment num_nz, MemorySegment matrix_start, MemorySegment matrix_index, MemorySegment matrix_value) {
        var mh$ = Highs_getColsByMask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getColsByMask", highs, mask, num_col, costs, lower, upper, num_nz, matrix_start, matrix_index, matrix_value);
            }
            return (long)mh$.invokeExact(highs, mask, num_col, costs, lower, upper, num_nz, matrix_start, matrix_index, matrix_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getRowsByRange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getRowsByRange");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getRowsByRange(const void *highs, const HighsInt from_row, const HighsInt to_row, HighsInt *num_row, double *lower, double *upper, HighsInt *num_nz, HighsInt *matrix_start, HighsInt *matrix_index, double *matrix_value)
     * }
     */
    public static FunctionDescriptor Highs_getRowsByRange$descriptor() {
        return Highs_getRowsByRange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getRowsByRange(const void *highs, const HighsInt from_row, const HighsInt to_row, HighsInt *num_row, double *lower, double *upper, HighsInt *num_nz, HighsInt *matrix_start, HighsInt *matrix_index, double *matrix_value)
     * }
     */
    public static MethodHandle Highs_getRowsByRange$handle() {
        return Highs_getRowsByRange.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getRowsByRange(const void *highs, const HighsInt from_row, const HighsInt to_row, HighsInt *num_row, double *lower, double *upper, HighsInt *num_nz, HighsInt *matrix_start, HighsInt *matrix_index, double *matrix_value)
     * }
     */
    public static MemorySegment Highs_getRowsByRange$address() {
        return Highs_getRowsByRange.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getRowsByRange(const void *highs, const HighsInt from_row, const HighsInt to_row, HighsInt *num_row, double *lower, double *upper, HighsInt *num_nz, HighsInt *matrix_start, HighsInt *matrix_index, double *matrix_value)
     * }
     */
    public static long Highs_getRowsByRange(MemorySegment highs, long from_row, long to_row, MemorySegment num_row, MemorySegment lower, MemorySegment upper, MemorySegment num_nz, MemorySegment matrix_start, MemorySegment matrix_index, MemorySegment matrix_value) {
        var mh$ = Highs_getRowsByRange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getRowsByRange", highs, from_row, to_row, num_row, lower, upper, num_nz, matrix_start, matrix_index, matrix_value);
            }
            return (long)mh$.invokeExact(highs, from_row, to_row, num_row, lower, upper, num_nz, matrix_start, matrix_index, matrix_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getRowsBySet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getRowsBySet");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getRowsBySet(const void *highs, const HighsInt num_set_entries, const HighsInt *set, HighsInt *num_row, double *lower, double *upper, HighsInt *num_nz, HighsInt *matrix_start, HighsInt *matrix_index, double *matrix_value)
     * }
     */
    public static FunctionDescriptor Highs_getRowsBySet$descriptor() {
        return Highs_getRowsBySet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getRowsBySet(const void *highs, const HighsInt num_set_entries, const HighsInt *set, HighsInt *num_row, double *lower, double *upper, HighsInt *num_nz, HighsInt *matrix_start, HighsInt *matrix_index, double *matrix_value)
     * }
     */
    public static MethodHandle Highs_getRowsBySet$handle() {
        return Highs_getRowsBySet.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getRowsBySet(const void *highs, const HighsInt num_set_entries, const HighsInt *set, HighsInt *num_row, double *lower, double *upper, HighsInt *num_nz, HighsInt *matrix_start, HighsInt *matrix_index, double *matrix_value)
     * }
     */
    public static MemorySegment Highs_getRowsBySet$address() {
        return Highs_getRowsBySet.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getRowsBySet(const void *highs, const HighsInt num_set_entries, const HighsInt *set, HighsInt *num_row, double *lower, double *upper, HighsInt *num_nz, HighsInt *matrix_start, HighsInt *matrix_index, double *matrix_value)
     * }
     */
    public static long Highs_getRowsBySet(MemorySegment highs, long num_set_entries, MemorySegment set, MemorySegment num_row, MemorySegment lower, MemorySegment upper, MemorySegment num_nz, MemorySegment matrix_start, MemorySegment matrix_index, MemorySegment matrix_value) {
        var mh$ = Highs_getRowsBySet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getRowsBySet", highs, num_set_entries, set, num_row, lower, upper, num_nz, matrix_start, matrix_index, matrix_value);
            }
            return (long)mh$.invokeExact(highs, num_set_entries, set, num_row, lower, upper, num_nz, matrix_start, matrix_index, matrix_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getRowsByMask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getRowsByMask");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getRowsByMask(const void *highs, const HighsInt *mask, HighsInt *num_row, double *lower, double *upper, HighsInt *num_nz, HighsInt *matrix_start, HighsInt *matrix_index, double *matrix_value)
     * }
     */
    public static FunctionDescriptor Highs_getRowsByMask$descriptor() {
        return Highs_getRowsByMask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getRowsByMask(const void *highs, const HighsInt *mask, HighsInt *num_row, double *lower, double *upper, HighsInt *num_nz, HighsInt *matrix_start, HighsInt *matrix_index, double *matrix_value)
     * }
     */
    public static MethodHandle Highs_getRowsByMask$handle() {
        return Highs_getRowsByMask.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getRowsByMask(const void *highs, const HighsInt *mask, HighsInt *num_row, double *lower, double *upper, HighsInt *num_nz, HighsInt *matrix_start, HighsInt *matrix_index, double *matrix_value)
     * }
     */
    public static MemorySegment Highs_getRowsByMask$address() {
        return Highs_getRowsByMask.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getRowsByMask(const void *highs, const HighsInt *mask, HighsInt *num_row, double *lower, double *upper, HighsInt *num_nz, HighsInt *matrix_start, HighsInt *matrix_index, double *matrix_value)
     * }
     */
    public static long Highs_getRowsByMask(MemorySegment highs, MemorySegment mask, MemorySegment num_row, MemorySegment lower, MemorySegment upper, MemorySegment num_nz, MemorySegment matrix_start, MemorySegment matrix_index, MemorySegment matrix_value) {
        var mh$ = Highs_getRowsByMask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getRowsByMask", highs, mask, num_row, lower, upper, num_nz, matrix_start, matrix_index, matrix_value);
            }
            return (long)mh$.invokeExact(highs, mask, num_row, lower, upper, num_nz, matrix_start, matrix_index, matrix_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getRowName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getRowName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getRowName(const void *highs, const HighsInt row, char *name)
     * }
     */
    public static FunctionDescriptor Highs_getRowName$descriptor() {
        return Highs_getRowName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getRowName(const void *highs, const HighsInt row, char *name)
     * }
     */
    public static MethodHandle Highs_getRowName$handle() {
        return Highs_getRowName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getRowName(const void *highs, const HighsInt row, char *name)
     * }
     */
    public static MemorySegment Highs_getRowName$address() {
        return Highs_getRowName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getRowName(const void *highs, const HighsInt row, char *name)
     * }
     */
    public static long Highs_getRowName(MemorySegment highs, long row, MemorySegment name) {
        var mh$ = Highs_getRowName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getRowName", highs, row, name);
            }
            return (long)mh$.invokeExact(highs, row, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getRowByName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getRowByName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getRowByName(const void *highs, const char *name, HighsInt *row)
     * }
     */
    public static FunctionDescriptor Highs_getRowByName$descriptor() {
        return Highs_getRowByName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getRowByName(const void *highs, const char *name, HighsInt *row)
     * }
     */
    public static MethodHandle Highs_getRowByName$handle() {
        return Highs_getRowByName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getRowByName(const void *highs, const char *name, HighsInt *row)
     * }
     */
    public static MemorySegment Highs_getRowByName$address() {
        return Highs_getRowByName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getRowByName(const void *highs, const char *name, HighsInt *row)
     * }
     */
    public static long Highs_getRowByName(MemorySegment highs, MemorySegment name, MemorySegment row) {
        var mh$ = Highs_getRowByName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getRowByName", highs, name, row);
            }
            return (long)mh$.invokeExact(highs, name, row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getColName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getColName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getColName(const void *highs, const HighsInt col, char *name)
     * }
     */
    public static FunctionDescriptor Highs_getColName$descriptor() {
        return Highs_getColName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getColName(const void *highs, const HighsInt col, char *name)
     * }
     */
    public static MethodHandle Highs_getColName$handle() {
        return Highs_getColName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getColName(const void *highs, const HighsInt col, char *name)
     * }
     */
    public static MemorySegment Highs_getColName$address() {
        return Highs_getColName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getColName(const void *highs, const HighsInt col, char *name)
     * }
     */
    public static long Highs_getColName(MemorySegment highs, long col, MemorySegment name) {
        var mh$ = Highs_getColName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getColName", highs, col, name);
            }
            return (long)mh$.invokeExact(highs, col, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getColByName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getColByName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getColByName(const void *highs, const char *name, HighsInt *col)
     * }
     */
    public static FunctionDescriptor Highs_getColByName$descriptor() {
        return Highs_getColByName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getColByName(const void *highs, const char *name, HighsInt *col)
     * }
     */
    public static MethodHandle Highs_getColByName$handle() {
        return Highs_getColByName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getColByName(const void *highs, const char *name, HighsInt *col)
     * }
     */
    public static MemorySegment Highs_getColByName$address() {
        return Highs_getColByName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getColByName(const void *highs, const char *name, HighsInt *col)
     * }
     */
    public static long Highs_getColByName(MemorySegment highs, MemorySegment name, MemorySegment col) {
        var mh$ = Highs_getColByName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getColByName", highs, name, col);
            }
            return (long)mh$.invokeExact(highs, name, col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getColIntegrality {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getColIntegrality");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getColIntegrality(const void *highs, const HighsInt col, HighsInt *integrality)
     * }
     */
    public static FunctionDescriptor Highs_getColIntegrality$descriptor() {
        return Highs_getColIntegrality.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getColIntegrality(const void *highs, const HighsInt col, HighsInt *integrality)
     * }
     */
    public static MethodHandle Highs_getColIntegrality$handle() {
        return Highs_getColIntegrality.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getColIntegrality(const void *highs, const HighsInt col, HighsInt *integrality)
     * }
     */
    public static MemorySegment Highs_getColIntegrality$address() {
        return Highs_getColIntegrality.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getColIntegrality(const void *highs, const HighsInt col, HighsInt *integrality)
     * }
     */
    public static long Highs_getColIntegrality(MemorySegment highs, long col, MemorySegment integrality) {
        var mh$ = Highs_getColIntegrality.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getColIntegrality", highs, col, integrality);
            }
            return (long)mh$.invokeExact(highs, col, integrality);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_deleteColsByRange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_deleteColsByRange");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_deleteColsByRange(void *highs, const HighsInt from_col, const HighsInt to_col)
     * }
     */
    public static FunctionDescriptor Highs_deleteColsByRange$descriptor() {
        return Highs_deleteColsByRange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_deleteColsByRange(void *highs, const HighsInt from_col, const HighsInt to_col)
     * }
     */
    public static MethodHandle Highs_deleteColsByRange$handle() {
        return Highs_deleteColsByRange.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_deleteColsByRange(void *highs, const HighsInt from_col, const HighsInt to_col)
     * }
     */
    public static MemorySegment Highs_deleteColsByRange$address() {
        return Highs_deleteColsByRange.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_deleteColsByRange(void *highs, const HighsInt from_col, const HighsInt to_col)
     * }
     */
    public static long Highs_deleteColsByRange(MemorySegment highs, long from_col, long to_col) {
        var mh$ = Highs_deleteColsByRange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_deleteColsByRange", highs, from_col, to_col);
            }
            return (long)mh$.invokeExact(highs, from_col, to_col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_deleteColsBySet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_deleteColsBySet");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_deleteColsBySet(void *highs, const HighsInt num_set_entries, const HighsInt *set)
     * }
     */
    public static FunctionDescriptor Highs_deleteColsBySet$descriptor() {
        return Highs_deleteColsBySet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_deleteColsBySet(void *highs, const HighsInt num_set_entries, const HighsInt *set)
     * }
     */
    public static MethodHandle Highs_deleteColsBySet$handle() {
        return Highs_deleteColsBySet.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_deleteColsBySet(void *highs, const HighsInt num_set_entries, const HighsInt *set)
     * }
     */
    public static MemorySegment Highs_deleteColsBySet$address() {
        return Highs_deleteColsBySet.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_deleteColsBySet(void *highs, const HighsInt num_set_entries, const HighsInt *set)
     * }
     */
    public static long Highs_deleteColsBySet(MemorySegment highs, long num_set_entries, MemorySegment set) {
        var mh$ = Highs_deleteColsBySet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_deleteColsBySet", highs, num_set_entries, set);
            }
            return (long)mh$.invokeExact(highs, num_set_entries, set);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_deleteColsByMask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_deleteColsByMask");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_deleteColsByMask(void *highs, HighsInt *mask)
     * }
     */
    public static FunctionDescriptor Highs_deleteColsByMask$descriptor() {
        return Highs_deleteColsByMask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_deleteColsByMask(void *highs, HighsInt *mask)
     * }
     */
    public static MethodHandle Highs_deleteColsByMask$handle() {
        return Highs_deleteColsByMask.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_deleteColsByMask(void *highs, HighsInt *mask)
     * }
     */
    public static MemorySegment Highs_deleteColsByMask$address() {
        return Highs_deleteColsByMask.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_deleteColsByMask(void *highs, HighsInt *mask)
     * }
     */
    public static long Highs_deleteColsByMask(MemorySegment highs, MemorySegment mask) {
        var mh$ = Highs_deleteColsByMask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_deleteColsByMask", highs, mask);
            }
            return (long)mh$.invokeExact(highs, mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_deleteRowsByRange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_INT,
            highs4j_c_api_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_deleteRowsByRange");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_deleteRowsByRange(void *highs, const int from_row, const HighsInt to_row)
     * }
     */
    public static FunctionDescriptor Highs_deleteRowsByRange$descriptor() {
        return Highs_deleteRowsByRange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_deleteRowsByRange(void *highs, const int from_row, const HighsInt to_row)
     * }
     */
    public static MethodHandle Highs_deleteRowsByRange$handle() {
        return Highs_deleteRowsByRange.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_deleteRowsByRange(void *highs, const int from_row, const HighsInt to_row)
     * }
     */
    public static MemorySegment Highs_deleteRowsByRange$address() {
        return Highs_deleteRowsByRange.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_deleteRowsByRange(void *highs, const int from_row, const HighsInt to_row)
     * }
     */
    public static long Highs_deleteRowsByRange(MemorySegment highs, int from_row, long to_row) {
        var mh$ = Highs_deleteRowsByRange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_deleteRowsByRange", highs, from_row, to_row);
            }
            return (long)mh$.invokeExact(highs, from_row, to_row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_deleteRowsBySet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_deleteRowsBySet");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_deleteRowsBySet(void *highs, const HighsInt num_set_entries, const HighsInt *set)
     * }
     */
    public static FunctionDescriptor Highs_deleteRowsBySet$descriptor() {
        return Highs_deleteRowsBySet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_deleteRowsBySet(void *highs, const HighsInt num_set_entries, const HighsInt *set)
     * }
     */
    public static MethodHandle Highs_deleteRowsBySet$handle() {
        return Highs_deleteRowsBySet.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_deleteRowsBySet(void *highs, const HighsInt num_set_entries, const HighsInt *set)
     * }
     */
    public static MemorySegment Highs_deleteRowsBySet$address() {
        return Highs_deleteRowsBySet.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_deleteRowsBySet(void *highs, const HighsInt num_set_entries, const HighsInt *set)
     * }
     */
    public static long Highs_deleteRowsBySet(MemorySegment highs, long num_set_entries, MemorySegment set) {
        var mh$ = Highs_deleteRowsBySet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_deleteRowsBySet", highs, num_set_entries, set);
            }
            return (long)mh$.invokeExact(highs, num_set_entries, set);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_deleteRowsByMask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_deleteRowsByMask");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_deleteRowsByMask(void *highs, HighsInt *mask)
     * }
     */
    public static FunctionDescriptor Highs_deleteRowsByMask$descriptor() {
        return Highs_deleteRowsByMask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_deleteRowsByMask(void *highs, HighsInt *mask)
     * }
     */
    public static MethodHandle Highs_deleteRowsByMask$handle() {
        return Highs_deleteRowsByMask.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_deleteRowsByMask(void *highs, HighsInt *mask)
     * }
     */
    public static MemorySegment Highs_deleteRowsByMask$address() {
        return Highs_deleteRowsByMask.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_deleteRowsByMask(void *highs, HighsInt *mask)
     * }
     */
    public static long Highs_deleteRowsByMask(MemorySegment highs, MemorySegment mask) {
        var mh$ = Highs_deleteRowsByMask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_deleteRowsByMask", highs, mask);
            }
            return (long)mh$.invokeExact(highs, mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_scaleCol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_scaleCol");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_scaleCol(void *highs, const HighsInt col, const double scaleval)
     * }
     */
    public static FunctionDescriptor Highs_scaleCol$descriptor() {
        return Highs_scaleCol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_scaleCol(void *highs, const HighsInt col, const double scaleval)
     * }
     */
    public static MethodHandle Highs_scaleCol$handle() {
        return Highs_scaleCol.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_scaleCol(void *highs, const HighsInt col, const double scaleval)
     * }
     */
    public static MemorySegment Highs_scaleCol$address() {
        return Highs_scaleCol.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_scaleCol(void *highs, const HighsInt col, const double scaleval)
     * }
     */
    public static long Highs_scaleCol(MemorySegment highs, long col, double scaleval) {
        var mh$ = Highs_scaleCol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_scaleCol", highs, col, scaleval);
            }
            return (long)mh$.invokeExact(highs, col, scaleval);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_scaleRow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_scaleRow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_scaleRow(void *highs, const HighsInt row, const double scaleval)
     * }
     */
    public static FunctionDescriptor Highs_scaleRow$descriptor() {
        return Highs_scaleRow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_scaleRow(void *highs, const HighsInt row, const double scaleval)
     * }
     */
    public static MethodHandle Highs_scaleRow$handle() {
        return Highs_scaleRow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_scaleRow(void *highs, const HighsInt row, const double scaleval)
     * }
     */
    public static MemorySegment Highs_scaleRow$address() {
        return Highs_scaleRow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_scaleRow(void *highs, const HighsInt row, const double scaleval)
     * }
     */
    public static long Highs_scaleRow(MemorySegment highs, long row, double scaleval) {
        var mh$ = Highs_scaleRow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_scaleRow", highs, row, scaleval);
            }
            return (long)mh$.invokeExact(highs, row, scaleval);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getInfinity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_DOUBLE,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getInfinity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double Highs_getInfinity(const void *highs)
     * }
     */
    public static FunctionDescriptor Highs_getInfinity$descriptor() {
        return Highs_getInfinity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double Highs_getInfinity(const void *highs)
     * }
     */
    public static MethodHandle Highs_getInfinity$handle() {
        return Highs_getInfinity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double Highs_getInfinity(const void *highs)
     * }
     */
    public static MemorySegment Highs_getInfinity$address() {
        return Highs_getInfinity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double Highs_getInfinity(const void *highs)
     * }
     */
    public static double Highs_getInfinity(MemorySegment highs) {
        var mh$ = Highs_getInfinity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getInfinity", highs);
            }
            return (double)mh$.invokeExact(highs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getSizeofHighsInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getSizeofHighsInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getSizeofHighsInt(const void *highs)
     * }
     */
    public static FunctionDescriptor Highs_getSizeofHighsInt$descriptor() {
        return Highs_getSizeofHighsInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getSizeofHighsInt(const void *highs)
     * }
     */
    public static MethodHandle Highs_getSizeofHighsInt$handle() {
        return Highs_getSizeofHighsInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getSizeofHighsInt(const void *highs)
     * }
     */
    public static MemorySegment Highs_getSizeofHighsInt$address() {
        return Highs_getSizeofHighsInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getSizeofHighsInt(const void *highs)
     * }
     */
    public static long Highs_getSizeofHighsInt(MemorySegment highs) {
        var mh$ = Highs_getSizeofHighsInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getSizeofHighsInt", highs);
            }
            return (long)mh$.invokeExact(highs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getNumCol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getNumCol");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getNumCol(const void *highs)
     * }
     */
    public static FunctionDescriptor Highs_getNumCol$descriptor() {
        return Highs_getNumCol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getNumCol(const void *highs)
     * }
     */
    public static MethodHandle Highs_getNumCol$handle() {
        return Highs_getNumCol.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getNumCol(const void *highs)
     * }
     */
    public static MemorySegment Highs_getNumCol$address() {
        return Highs_getNumCol.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getNumCol(const void *highs)
     * }
     */
    public static long Highs_getNumCol(MemorySegment highs) {
        var mh$ = Highs_getNumCol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getNumCol", highs);
            }
            return (long)mh$.invokeExact(highs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getNumRow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getNumRow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getNumRow(const void *highs)
     * }
     */
    public static FunctionDescriptor Highs_getNumRow$descriptor() {
        return Highs_getNumRow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getNumRow(const void *highs)
     * }
     */
    public static MethodHandle Highs_getNumRow$handle() {
        return Highs_getNumRow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getNumRow(const void *highs)
     * }
     */
    public static MemorySegment Highs_getNumRow$address() {
        return Highs_getNumRow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getNumRow(const void *highs)
     * }
     */
    public static long Highs_getNumRow(MemorySegment highs) {
        var mh$ = Highs_getNumRow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getNumRow", highs);
            }
            return (long)mh$.invokeExact(highs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getNumNz {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getNumNz");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getNumNz(const void *highs)
     * }
     */
    public static FunctionDescriptor Highs_getNumNz$descriptor() {
        return Highs_getNumNz.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getNumNz(const void *highs)
     * }
     */
    public static MethodHandle Highs_getNumNz$handle() {
        return Highs_getNumNz.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getNumNz(const void *highs)
     * }
     */
    public static MemorySegment Highs_getNumNz$address() {
        return Highs_getNumNz.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getNumNz(const void *highs)
     * }
     */
    public static long Highs_getNumNz(MemorySegment highs) {
        var mh$ = Highs_getNumNz.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getNumNz", highs);
            }
            return (long)mh$.invokeExact(highs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getHessianNumNz {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getHessianNumNz");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getHessianNumNz(const void *highs)
     * }
     */
    public static FunctionDescriptor Highs_getHessianNumNz$descriptor() {
        return Highs_getHessianNumNz.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getHessianNumNz(const void *highs)
     * }
     */
    public static MethodHandle Highs_getHessianNumNz$handle() {
        return Highs_getHessianNumNz.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getHessianNumNz(const void *highs)
     * }
     */
    public static MemorySegment Highs_getHessianNumNz$address() {
        return Highs_getHessianNumNz.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getHessianNumNz(const void *highs)
     * }
     */
    public static long Highs_getHessianNumNz(MemorySegment highs) {
        var mh$ = Highs_getHessianNumNz.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getHessianNumNz", highs);
            }
            return (long)mh$.invokeExact(highs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getPresolvedNumCol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getPresolvedNumCol");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getPresolvedNumCol(const void *highs)
     * }
     */
    public static FunctionDescriptor Highs_getPresolvedNumCol$descriptor() {
        return Highs_getPresolvedNumCol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getPresolvedNumCol(const void *highs)
     * }
     */
    public static MethodHandle Highs_getPresolvedNumCol$handle() {
        return Highs_getPresolvedNumCol.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getPresolvedNumCol(const void *highs)
     * }
     */
    public static MemorySegment Highs_getPresolvedNumCol$address() {
        return Highs_getPresolvedNumCol.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getPresolvedNumCol(const void *highs)
     * }
     */
    public static long Highs_getPresolvedNumCol(MemorySegment highs) {
        var mh$ = Highs_getPresolvedNumCol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getPresolvedNumCol", highs);
            }
            return (long)mh$.invokeExact(highs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getPresolvedNumRow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getPresolvedNumRow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getPresolvedNumRow(const void *highs)
     * }
     */
    public static FunctionDescriptor Highs_getPresolvedNumRow$descriptor() {
        return Highs_getPresolvedNumRow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getPresolvedNumRow(const void *highs)
     * }
     */
    public static MethodHandle Highs_getPresolvedNumRow$handle() {
        return Highs_getPresolvedNumRow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getPresolvedNumRow(const void *highs)
     * }
     */
    public static MemorySegment Highs_getPresolvedNumRow$address() {
        return Highs_getPresolvedNumRow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getPresolvedNumRow(const void *highs)
     * }
     */
    public static long Highs_getPresolvedNumRow(MemorySegment highs) {
        var mh$ = Highs_getPresolvedNumRow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getPresolvedNumRow", highs);
            }
            return (long)mh$.invokeExact(highs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getPresolvedNumNz {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getPresolvedNumNz");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getPresolvedNumNz(const void *highs)
     * }
     */
    public static FunctionDescriptor Highs_getPresolvedNumNz$descriptor() {
        return Highs_getPresolvedNumNz.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getPresolvedNumNz(const void *highs)
     * }
     */
    public static MethodHandle Highs_getPresolvedNumNz$handle() {
        return Highs_getPresolvedNumNz.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getPresolvedNumNz(const void *highs)
     * }
     */
    public static MemorySegment Highs_getPresolvedNumNz$address() {
        return Highs_getPresolvedNumNz.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getPresolvedNumNz(const void *highs)
     * }
     */
    public static long Highs_getPresolvedNumNz(MemorySegment highs) {
        var mh$ = Highs_getPresolvedNumNz.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getPresolvedNumNz", highs);
            }
            return (long)mh$.invokeExact(highs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getModel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getModel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getModel(const void *highs, const HighsInt a_format, const HighsInt q_format, HighsInt *num_col, HighsInt *num_row, HighsInt *num_nz, HighsInt *hessian_num_nz, HighsInt *sense, double *offset, double *col_cost, double *col_lower, double *col_upper, double *row_lower, double *row_upper, HighsInt *a_start, HighsInt *a_index, double *a_value, HighsInt *q_start, HighsInt *q_index, double *q_value, HighsInt *integrality)
     * }
     */
    public static FunctionDescriptor Highs_getModel$descriptor() {
        return Highs_getModel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getModel(const void *highs, const HighsInt a_format, const HighsInt q_format, HighsInt *num_col, HighsInt *num_row, HighsInt *num_nz, HighsInt *hessian_num_nz, HighsInt *sense, double *offset, double *col_cost, double *col_lower, double *col_upper, double *row_lower, double *row_upper, HighsInt *a_start, HighsInt *a_index, double *a_value, HighsInt *q_start, HighsInt *q_index, double *q_value, HighsInt *integrality)
     * }
     */
    public static MethodHandle Highs_getModel$handle() {
        return Highs_getModel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getModel(const void *highs, const HighsInt a_format, const HighsInt q_format, HighsInt *num_col, HighsInt *num_row, HighsInt *num_nz, HighsInt *hessian_num_nz, HighsInt *sense, double *offset, double *col_cost, double *col_lower, double *col_upper, double *row_lower, double *row_upper, HighsInt *a_start, HighsInt *a_index, double *a_value, HighsInt *q_start, HighsInt *q_index, double *q_value, HighsInt *integrality)
     * }
     */
    public static MemorySegment Highs_getModel$address() {
        return Highs_getModel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getModel(const void *highs, const HighsInt a_format, const HighsInt q_format, HighsInt *num_col, HighsInt *num_row, HighsInt *num_nz, HighsInt *hessian_num_nz, HighsInt *sense, double *offset, double *col_cost, double *col_lower, double *col_upper, double *row_lower, double *row_upper, HighsInt *a_start, HighsInt *a_index, double *a_value, HighsInt *q_start, HighsInt *q_index, double *q_value, HighsInt *integrality)
     * }
     */
    public static long Highs_getModel(MemorySegment highs, long a_format, long q_format, MemorySegment num_col, MemorySegment num_row, MemorySegment num_nz, MemorySegment hessian_num_nz, MemorySegment sense, MemorySegment offset, MemorySegment col_cost, MemorySegment col_lower, MemorySegment col_upper, MemorySegment row_lower, MemorySegment row_upper, MemorySegment a_start, MemorySegment a_index, MemorySegment a_value, MemorySegment q_start, MemorySegment q_index, MemorySegment q_value, MemorySegment integrality) {
        var mh$ = Highs_getModel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getModel", highs, a_format, q_format, num_col, num_row, num_nz, hessian_num_nz, sense, offset, col_cost, col_lower, col_upper, row_lower, row_upper, a_start, a_index, a_value, q_start, q_index, q_value, integrality);
            }
            return (long)mh$.invokeExact(highs, a_format, q_format, num_col, num_row, num_nz, hessian_num_nz, sense, offset, col_cost, col_lower, col_upper, row_lower, row_upper, a_start, a_index, a_value, q_start, q_index, q_value, integrality);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getLp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getLp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getLp(const void *highs, const HighsInt a_format, HighsInt *num_col, HighsInt *num_row, HighsInt *num_nz, HighsInt *sense, double *offset, double *col_cost, double *col_lower, double *col_upper, double *row_lower, double *row_upper, HighsInt *a_start, HighsInt *a_index, double *a_value, HighsInt *integrality)
     * }
     */
    public static FunctionDescriptor Highs_getLp$descriptor() {
        return Highs_getLp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getLp(const void *highs, const HighsInt a_format, HighsInt *num_col, HighsInt *num_row, HighsInt *num_nz, HighsInt *sense, double *offset, double *col_cost, double *col_lower, double *col_upper, double *row_lower, double *row_upper, HighsInt *a_start, HighsInt *a_index, double *a_value, HighsInt *integrality)
     * }
     */
    public static MethodHandle Highs_getLp$handle() {
        return Highs_getLp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getLp(const void *highs, const HighsInt a_format, HighsInt *num_col, HighsInt *num_row, HighsInt *num_nz, HighsInt *sense, double *offset, double *col_cost, double *col_lower, double *col_upper, double *row_lower, double *row_upper, HighsInt *a_start, HighsInt *a_index, double *a_value, HighsInt *integrality)
     * }
     */
    public static MemorySegment Highs_getLp$address() {
        return Highs_getLp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getLp(const void *highs, const HighsInt a_format, HighsInt *num_col, HighsInt *num_row, HighsInt *num_nz, HighsInt *sense, double *offset, double *col_cost, double *col_lower, double *col_upper, double *row_lower, double *row_upper, HighsInt *a_start, HighsInt *a_index, double *a_value, HighsInt *integrality)
     * }
     */
    public static long Highs_getLp(MemorySegment highs, long a_format, MemorySegment num_col, MemorySegment num_row, MemorySegment num_nz, MemorySegment sense, MemorySegment offset, MemorySegment col_cost, MemorySegment col_lower, MemorySegment col_upper, MemorySegment row_lower, MemorySegment row_upper, MemorySegment a_start, MemorySegment a_index, MemorySegment a_value, MemorySegment integrality) {
        var mh$ = Highs_getLp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getLp", highs, a_format, num_col, num_row, num_nz, sense, offset, col_cost, col_lower, col_upper, row_lower, row_upper, a_start, a_index, a_value, integrality);
            }
            return (long)mh$.invokeExact(highs, a_format, num_col, num_row, num_nz, sense, offset, col_cost, col_lower, col_upper, row_lower, row_upper, a_start, a_index, a_value, integrality);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getPresolvedLp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getPresolvedLp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getPresolvedLp(const void *highs, const HighsInt a_format, HighsInt *num_col, HighsInt *num_row, HighsInt *num_nz, HighsInt *sense, double *offset, double *col_cost, double *col_lower, double *col_upper, double *row_lower, double *row_upper, HighsInt *a_start, HighsInt *a_index, double *a_value, HighsInt *integrality)
     * }
     */
    public static FunctionDescriptor Highs_getPresolvedLp$descriptor() {
        return Highs_getPresolvedLp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getPresolvedLp(const void *highs, const HighsInt a_format, HighsInt *num_col, HighsInt *num_row, HighsInt *num_nz, HighsInt *sense, double *offset, double *col_cost, double *col_lower, double *col_upper, double *row_lower, double *row_upper, HighsInt *a_start, HighsInt *a_index, double *a_value, HighsInt *integrality)
     * }
     */
    public static MethodHandle Highs_getPresolvedLp$handle() {
        return Highs_getPresolvedLp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getPresolvedLp(const void *highs, const HighsInt a_format, HighsInt *num_col, HighsInt *num_row, HighsInt *num_nz, HighsInt *sense, double *offset, double *col_cost, double *col_lower, double *col_upper, double *row_lower, double *row_upper, HighsInt *a_start, HighsInt *a_index, double *a_value, HighsInt *integrality)
     * }
     */
    public static MemorySegment Highs_getPresolvedLp$address() {
        return Highs_getPresolvedLp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getPresolvedLp(const void *highs, const HighsInt a_format, HighsInt *num_col, HighsInt *num_row, HighsInt *num_nz, HighsInt *sense, double *offset, double *col_cost, double *col_lower, double *col_upper, double *row_lower, double *row_upper, HighsInt *a_start, HighsInt *a_index, double *a_value, HighsInt *integrality)
     * }
     */
    public static long Highs_getPresolvedLp(MemorySegment highs, long a_format, MemorySegment num_col, MemorySegment num_row, MemorySegment num_nz, MemorySegment sense, MemorySegment offset, MemorySegment col_cost, MemorySegment col_lower, MemorySegment col_upper, MemorySegment row_lower, MemorySegment row_upper, MemorySegment a_start, MemorySegment a_index, MemorySegment a_value, MemorySegment integrality) {
        var mh$ = Highs_getPresolvedLp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getPresolvedLp", highs, a_format, num_col, num_row, num_nz, sense, offset, col_cost, col_lower, col_upper, row_lower, row_upper, a_start, a_index, a_value, integrality);
            }
            return (long)mh$.invokeExact(highs, a_format, num_col, num_row, num_nz, sense, offset, col_cost, col_lower, col_upper, row_lower, row_upper, a_start, a_index, a_value, integrality);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_crossover {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_INT,
            highs4j_c_api_h.C_INT,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_crossover");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_crossover(void *highs, const int num_col, const int num_row, const double *col_value, const double *col_dual, const double *row_dual)
     * }
     */
    public static FunctionDescriptor Highs_crossover$descriptor() {
        return Highs_crossover.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_crossover(void *highs, const int num_col, const int num_row, const double *col_value, const double *col_dual, const double *row_dual)
     * }
     */
    public static MethodHandle Highs_crossover$handle() {
        return Highs_crossover.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_crossover(void *highs, const int num_col, const int num_row, const double *col_value, const double *col_dual, const double *row_dual)
     * }
     */
    public static MemorySegment Highs_crossover$address() {
        return Highs_crossover.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_crossover(void *highs, const int num_col, const int num_row, const double *col_value, const double *col_dual, const double *row_dual)
     * }
     */
    public static long Highs_crossover(MemorySegment highs, int num_col, int num_row, MemorySegment col_value, MemorySegment col_dual, MemorySegment row_dual) {
        var mh$ = Highs_crossover.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_crossover", highs, num_col, num_row, col_value, col_dual, row_dual);
            }
            return (long)mh$.invokeExact(highs, num_col, num_row, col_value, col_dual, row_dual);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getRanging {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getRanging");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getRanging(void *highs, double *col_cost_up_value, double *col_cost_up_objective, HighsInt *col_cost_up_in_var, HighsInt *col_cost_up_ou_var, double *col_cost_dn_value, double *col_cost_dn_objective, HighsInt *col_cost_dn_in_var, HighsInt *col_cost_dn_ou_var, double *col_bound_up_value, double *col_bound_up_objective, HighsInt *col_bound_up_in_var, HighsInt *col_bound_up_ou_var, double *col_bound_dn_value, double *col_bound_dn_objective, HighsInt *col_bound_dn_in_var, HighsInt *col_bound_dn_ou_var, double *row_bound_up_value, double *row_bound_up_objective, HighsInt *row_bound_up_in_var, HighsInt *row_bound_up_ou_var, double *row_bound_dn_value, double *row_bound_dn_objective, HighsInt *row_bound_dn_in_var, HighsInt *row_bound_dn_ou_var)
     * }
     */
    public static FunctionDescriptor Highs_getRanging$descriptor() {
        return Highs_getRanging.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getRanging(void *highs, double *col_cost_up_value, double *col_cost_up_objective, HighsInt *col_cost_up_in_var, HighsInt *col_cost_up_ou_var, double *col_cost_dn_value, double *col_cost_dn_objective, HighsInt *col_cost_dn_in_var, HighsInt *col_cost_dn_ou_var, double *col_bound_up_value, double *col_bound_up_objective, HighsInt *col_bound_up_in_var, HighsInt *col_bound_up_ou_var, double *col_bound_dn_value, double *col_bound_dn_objective, HighsInt *col_bound_dn_in_var, HighsInt *col_bound_dn_ou_var, double *row_bound_up_value, double *row_bound_up_objective, HighsInt *row_bound_up_in_var, HighsInt *row_bound_up_ou_var, double *row_bound_dn_value, double *row_bound_dn_objective, HighsInt *row_bound_dn_in_var, HighsInt *row_bound_dn_ou_var)
     * }
     */
    public static MethodHandle Highs_getRanging$handle() {
        return Highs_getRanging.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getRanging(void *highs, double *col_cost_up_value, double *col_cost_up_objective, HighsInt *col_cost_up_in_var, HighsInt *col_cost_up_ou_var, double *col_cost_dn_value, double *col_cost_dn_objective, HighsInt *col_cost_dn_in_var, HighsInt *col_cost_dn_ou_var, double *col_bound_up_value, double *col_bound_up_objective, HighsInt *col_bound_up_in_var, HighsInt *col_bound_up_ou_var, double *col_bound_dn_value, double *col_bound_dn_objective, HighsInt *col_bound_dn_in_var, HighsInt *col_bound_dn_ou_var, double *row_bound_up_value, double *row_bound_up_objective, HighsInt *row_bound_up_in_var, HighsInt *row_bound_up_ou_var, double *row_bound_dn_value, double *row_bound_dn_objective, HighsInt *row_bound_dn_in_var, HighsInt *row_bound_dn_ou_var)
     * }
     */
    public static MemorySegment Highs_getRanging$address() {
        return Highs_getRanging.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getRanging(void *highs, double *col_cost_up_value, double *col_cost_up_objective, HighsInt *col_cost_up_in_var, HighsInt *col_cost_up_ou_var, double *col_cost_dn_value, double *col_cost_dn_objective, HighsInt *col_cost_dn_in_var, HighsInt *col_cost_dn_ou_var, double *col_bound_up_value, double *col_bound_up_objective, HighsInt *col_bound_up_in_var, HighsInt *col_bound_up_ou_var, double *col_bound_dn_value, double *col_bound_dn_objective, HighsInt *col_bound_dn_in_var, HighsInt *col_bound_dn_ou_var, double *row_bound_up_value, double *row_bound_up_objective, HighsInt *row_bound_up_in_var, HighsInt *row_bound_up_ou_var, double *row_bound_dn_value, double *row_bound_dn_objective, HighsInt *row_bound_dn_in_var, HighsInt *row_bound_dn_ou_var)
     * }
     */
    public static long Highs_getRanging(MemorySegment highs, MemorySegment col_cost_up_value, MemorySegment col_cost_up_objective, MemorySegment col_cost_up_in_var, MemorySegment col_cost_up_ou_var, MemorySegment col_cost_dn_value, MemorySegment col_cost_dn_objective, MemorySegment col_cost_dn_in_var, MemorySegment col_cost_dn_ou_var, MemorySegment col_bound_up_value, MemorySegment col_bound_up_objective, MemorySegment col_bound_up_in_var, MemorySegment col_bound_up_ou_var, MemorySegment col_bound_dn_value, MemorySegment col_bound_dn_objective, MemorySegment col_bound_dn_in_var, MemorySegment col_bound_dn_ou_var, MemorySegment row_bound_up_value, MemorySegment row_bound_up_objective, MemorySegment row_bound_up_in_var, MemorySegment row_bound_up_ou_var, MemorySegment row_bound_dn_value, MemorySegment row_bound_dn_objective, MemorySegment row_bound_dn_in_var, MemorySegment row_bound_dn_ou_var) {
        var mh$ = Highs_getRanging.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getRanging", highs, col_cost_up_value, col_cost_up_objective, col_cost_up_in_var, col_cost_up_ou_var, col_cost_dn_value, col_cost_dn_objective, col_cost_dn_in_var, col_cost_dn_ou_var, col_bound_up_value, col_bound_up_objective, col_bound_up_in_var, col_bound_up_ou_var, col_bound_dn_value, col_bound_dn_objective, col_bound_dn_in_var, col_bound_dn_ou_var, row_bound_up_value, row_bound_up_objective, row_bound_up_in_var, row_bound_up_ou_var, row_bound_dn_value, row_bound_dn_objective, row_bound_dn_in_var, row_bound_dn_ou_var);
            }
            return (long)mh$.invokeExact(highs, col_cost_up_value, col_cost_up_objective, col_cost_up_in_var, col_cost_up_ou_var, col_cost_dn_value, col_cost_dn_objective, col_cost_dn_in_var, col_cost_dn_ou_var, col_bound_up_value, col_bound_up_objective, col_bound_up_in_var, col_bound_up_ou_var, col_bound_dn_value, col_bound_dn_objective, col_bound_dn_in_var, col_bound_dn_ou_var, row_bound_up_value, row_bound_up_objective, row_bound_up_in_var, row_bound_up_ou_var, row_bound_dn_value, row_bound_dn_objective, row_bound_dn_in_var, row_bound_dn_ou_var);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_feasibilityRelaxation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_DOUBLE,
            highs4j_c_api_h.C_DOUBLE,
            highs4j_c_api_h.C_DOUBLE,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_feasibilityRelaxation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_feasibilityRelaxation(void *highs, const double global_lower_penalty, const double global_upper_penalty, const double global_rhs_penalty, const double *local_lower_penalty, const double *local_upper_penalty, const double *local_rhs_penalty)
     * }
     */
    public static FunctionDescriptor Highs_feasibilityRelaxation$descriptor() {
        return Highs_feasibilityRelaxation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_feasibilityRelaxation(void *highs, const double global_lower_penalty, const double global_upper_penalty, const double global_rhs_penalty, const double *local_lower_penalty, const double *local_upper_penalty, const double *local_rhs_penalty)
     * }
     */
    public static MethodHandle Highs_feasibilityRelaxation$handle() {
        return Highs_feasibilityRelaxation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_feasibilityRelaxation(void *highs, const double global_lower_penalty, const double global_upper_penalty, const double global_rhs_penalty, const double *local_lower_penalty, const double *local_upper_penalty, const double *local_rhs_penalty)
     * }
     */
    public static MemorySegment Highs_feasibilityRelaxation$address() {
        return Highs_feasibilityRelaxation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_feasibilityRelaxation(void *highs, const double global_lower_penalty, const double global_upper_penalty, const double global_rhs_penalty, const double *local_lower_penalty, const double *local_upper_penalty, const double *local_rhs_penalty)
     * }
     */
    public static long Highs_feasibilityRelaxation(MemorySegment highs, double global_lower_penalty, double global_upper_penalty, double global_rhs_penalty, MemorySegment local_lower_penalty, MemorySegment local_upper_penalty, MemorySegment local_rhs_penalty) {
        var mh$ = Highs_feasibilityRelaxation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_feasibilityRelaxation", highs, global_lower_penalty, global_upper_penalty, global_rhs_penalty, local_lower_penalty, local_upper_penalty, local_rhs_penalty);
            }
            return (long)mh$.invokeExact(highs, global_lower_penalty, global_upper_penalty, global_rhs_penalty, local_lower_penalty, local_upper_penalty, local_rhs_penalty);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_resetGlobalScheduler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            highs4j_c_api_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_resetGlobalScheduler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void Highs_resetGlobalScheduler(const HighsInt blocking)
     * }
     */
    public static FunctionDescriptor Highs_resetGlobalScheduler$descriptor() {
        return Highs_resetGlobalScheduler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void Highs_resetGlobalScheduler(const HighsInt blocking)
     * }
     */
    public static MethodHandle Highs_resetGlobalScheduler$handle() {
        return Highs_resetGlobalScheduler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void Highs_resetGlobalScheduler(const HighsInt blocking)
     * }
     */
    public static MemorySegment Highs_resetGlobalScheduler$address() {
        return Highs_resetGlobalScheduler.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void Highs_resetGlobalScheduler(const HighsInt blocking)
     * }
     */
    public static void Highs_resetGlobalScheduler(long blocking) {
        var mh$ = Highs_resetGlobalScheduler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_resetGlobalScheduler", blocking);
            }
            mh$.invokeExact(blocking);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getCallbackDataOutItem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getCallbackDataOutItem");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const void *Highs_getCallbackDataOutItem(const HighsCallbackDataOut *data_out, const char *item_name)
     * }
     */
    public static FunctionDescriptor Highs_getCallbackDataOutItem$descriptor() {
        return Highs_getCallbackDataOutItem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const void *Highs_getCallbackDataOutItem(const HighsCallbackDataOut *data_out, const char *item_name)
     * }
     */
    public static MethodHandle Highs_getCallbackDataOutItem$handle() {
        return Highs_getCallbackDataOutItem.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const void *Highs_getCallbackDataOutItem(const HighsCallbackDataOut *data_out, const char *item_name)
     * }
     */
    public static MemorySegment Highs_getCallbackDataOutItem$address() {
        return Highs_getCallbackDataOutItem.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const void *Highs_getCallbackDataOutItem(const HighsCallbackDataOut *data_out, const char *item_name)
     * }
     */
    public static MemorySegment Highs_getCallbackDataOutItem(MemorySegment data_out, MemorySegment item_name) {
        var mh$ = Highs_getCallbackDataOutItem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getCallbackDataOutItem", data_out, item_name);
            }
            return (MemorySegment)mh$.invokeExact(data_out, item_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_compilationDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_POINTER    );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_compilationDate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *Highs_compilationDate()
     * }
     */
    public static FunctionDescriptor Highs_compilationDate$descriptor() {
        return Highs_compilationDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *Highs_compilationDate()
     * }
     */
    public static MethodHandle Highs_compilationDate$handle() {
        return Highs_compilationDate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *Highs_compilationDate()
     * }
     */
    public static MemorySegment Highs_compilationDate$address() {
        return Highs_compilationDate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *Highs_compilationDate()
     * }
     */
    public static MemorySegment Highs_compilationDate() {
        var mh$ = Highs_compilationDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_compilationDate");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_call {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_call");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_call(const HighsInt num_col, const HighsInt num_row, const HighsInt num_nz, const double *col_cost, const double *col_lower, const double *col_upper, const double *row_lower, const double *row_upper, const HighsInt *a_start, const HighsInt *a_index, const double *a_value, double *col_value, double *col_dual, double *row_value, double *row_dual, HighsInt *col_basis_status, HighsInt *row_basis_status, HighsInt *model_status)
     * }
     */
    public static FunctionDescriptor Highs_call$descriptor() {
        return Highs_call.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_call(const HighsInt num_col, const HighsInt num_row, const HighsInt num_nz, const double *col_cost, const double *col_lower, const double *col_upper, const double *row_lower, const double *row_upper, const HighsInt *a_start, const HighsInt *a_index, const double *a_value, double *col_value, double *col_dual, double *row_value, double *row_dual, HighsInt *col_basis_status, HighsInt *row_basis_status, HighsInt *model_status)
     * }
     */
    public static MethodHandle Highs_call$handle() {
        return Highs_call.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_call(const HighsInt num_col, const HighsInt num_row, const HighsInt num_nz, const double *col_cost, const double *col_lower, const double *col_upper, const double *row_lower, const double *row_upper, const HighsInt *a_start, const HighsInt *a_index, const double *a_value, double *col_value, double *col_dual, double *row_value, double *row_dual, HighsInt *col_basis_status, HighsInt *row_basis_status, HighsInt *model_status)
     * }
     */
    public static MemorySegment Highs_call$address() {
        return Highs_call.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_call(const HighsInt num_col, const HighsInt num_row, const HighsInt num_nz, const double *col_cost, const double *col_lower, const double *col_upper, const double *row_lower, const double *row_upper, const HighsInt *a_start, const HighsInt *a_index, const double *a_value, double *col_value, double *col_dual, double *row_value, double *row_dual, HighsInt *col_basis_status, HighsInt *row_basis_status, HighsInt *model_status)
     * }
     */
    public static long Highs_call(long num_col, long num_row, long num_nz, MemorySegment col_cost, MemorySegment col_lower, MemorySegment col_upper, MemorySegment row_lower, MemorySegment row_upper, MemorySegment a_start, MemorySegment a_index, MemorySegment a_value, MemorySegment col_value, MemorySegment col_dual, MemorySegment row_value, MemorySegment row_dual, MemorySegment col_basis_status, MemorySegment row_basis_status, MemorySegment model_status) {
        var mh$ = Highs_call.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_call", num_col, num_row, num_nz, col_cost, col_lower, col_upper, row_lower, row_upper, a_start, a_index, a_value, col_value, col_dual, row_value, row_dual, col_basis_status, row_basis_status, model_status);
            }
            return (long)mh$.invokeExact(num_col, num_row, num_nz, col_cost, col_lower, col_upper, row_lower, row_upper, a_start, a_index, a_value, col_value, col_dual, row_value, row_dual, col_basis_status, row_basis_status, model_status);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_runQuiet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_runQuiet");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_runQuiet(void *highs)
     * }
     */
    public static FunctionDescriptor Highs_runQuiet$descriptor() {
        return Highs_runQuiet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_runQuiet(void *highs)
     * }
     */
    public static MethodHandle Highs_runQuiet$handle() {
        return Highs_runQuiet.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_runQuiet(void *highs)
     * }
     */
    public static MemorySegment Highs_runQuiet$address() {
        return Highs_runQuiet.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_runQuiet(void *highs)
     * }
     */
    public static long Highs_runQuiet(MemorySegment highs) {
        var mh$ = Highs_runQuiet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_runQuiet", highs);
            }
            return (long)mh$.invokeExact(highs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_setHighsLogfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_setHighsLogfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_setHighsLogfile(void *highs, const void *logfile)
     * }
     */
    public static FunctionDescriptor Highs_setHighsLogfile$descriptor() {
        return Highs_setHighsLogfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_setHighsLogfile(void *highs, const void *logfile)
     * }
     */
    public static MethodHandle Highs_setHighsLogfile$handle() {
        return Highs_setHighsLogfile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_setHighsLogfile(void *highs, const void *logfile)
     * }
     */
    public static MemorySegment Highs_setHighsLogfile$address() {
        return Highs_setHighsLogfile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_setHighsLogfile(void *highs, const void *logfile)
     * }
     */
    public static long Highs_setHighsLogfile(MemorySegment highs, MemorySegment logfile) {
        var mh$ = Highs_setHighsLogfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_setHighsLogfile", highs, logfile);
            }
            return (long)mh$.invokeExact(highs, logfile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_setHighsOutput {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_setHighsOutput");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_setHighsOutput(void *highs, const void *outputfile)
     * }
     */
    public static FunctionDescriptor Highs_setHighsOutput$descriptor() {
        return Highs_setHighsOutput.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_setHighsOutput(void *highs, const void *outputfile)
     * }
     */
    public static MethodHandle Highs_setHighsOutput$handle() {
        return Highs_setHighsOutput.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_setHighsOutput(void *highs, const void *outputfile)
     * }
     */
    public static MemorySegment Highs_setHighsOutput$address() {
        return Highs_setHighsOutput.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_setHighsOutput(void *highs, const void *outputfile)
     * }
     */
    public static long Highs_setHighsOutput(MemorySegment highs, MemorySegment outputfile) {
        var mh$ = Highs_setHighsOutput.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_setHighsOutput", highs, outputfile);
            }
            return (long)mh$.invokeExact(highs, outputfile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getIterationCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getIterationCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getIterationCount(const void *highs)
     * }
     */
    public static FunctionDescriptor Highs_getIterationCount$descriptor() {
        return Highs_getIterationCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getIterationCount(const void *highs)
     * }
     */
    public static MethodHandle Highs_getIterationCount$handle() {
        return Highs_getIterationCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getIterationCount(const void *highs)
     * }
     */
    public static MemorySegment Highs_getIterationCount$address() {
        return Highs_getIterationCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getIterationCount(const void *highs)
     * }
     */
    public static long Highs_getIterationCount(MemorySegment highs) {
        var mh$ = Highs_getIterationCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getIterationCount", highs);
            }
            return (long)mh$.invokeExact(highs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getSimplexIterationCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getSimplexIterationCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getSimplexIterationCount(const void *highs)
     * }
     */
    public static FunctionDescriptor Highs_getSimplexIterationCount$descriptor() {
        return Highs_getSimplexIterationCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getSimplexIterationCount(const void *highs)
     * }
     */
    public static MethodHandle Highs_getSimplexIterationCount$handle() {
        return Highs_getSimplexIterationCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getSimplexIterationCount(const void *highs)
     * }
     */
    public static MemorySegment Highs_getSimplexIterationCount$address() {
        return Highs_getSimplexIterationCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getSimplexIterationCount(const void *highs)
     * }
     */
    public static long Highs_getSimplexIterationCount(MemorySegment highs) {
        var mh$ = Highs_getSimplexIterationCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getSimplexIterationCount", highs);
            }
            return (long)mh$.invokeExact(highs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_setHighsBoolOptionValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_setHighsBoolOptionValue");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_setHighsBoolOptionValue(void *highs, const char *option, const HighsInt value)
     * }
     */
    public static FunctionDescriptor Highs_setHighsBoolOptionValue$descriptor() {
        return Highs_setHighsBoolOptionValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_setHighsBoolOptionValue(void *highs, const char *option, const HighsInt value)
     * }
     */
    public static MethodHandle Highs_setHighsBoolOptionValue$handle() {
        return Highs_setHighsBoolOptionValue.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_setHighsBoolOptionValue(void *highs, const char *option, const HighsInt value)
     * }
     */
    public static MemorySegment Highs_setHighsBoolOptionValue$address() {
        return Highs_setHighsBoolOptionValue.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_setHighsBoolOptionValue(void *highs, const char *option, const HighsInt value)
     * }
     */
    public static long Highs_setHighsBoolOptionValue(MemorySegment highs, MemorySegment option, long value) {
        var mh$ = Highs_setHighsBoolOptionValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_setHighsBoolOptionValue", highs, option, value);
            }
            return (long)mh$.invokeExact(highs, option, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_setHighsIntOptionValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_setHighsIntOptionValue");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_setHighsIntOptionValue(void *highs, const char *option, const HighsInt value)
     * }
     */
    public static FunctionDescriptor Highs_setHighsIntOptionValue$descriptor() {
        return Highs_setHighsIntOptionValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_setHighsIntOptionValue(void *highs, const char *option, const HighsInt value)
     * }
     */
    public static MethodHandle Highs_setHighsIntOptionValue$handle() {
        return Highs_setHighsIntOptionValue.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_setHighsIntOptionValue(void *highs, const char *option, const HighsInt value)
     * }
     */
    public static MemorySegment Highs_setHighsIntOptionValue$address() {
        return Highs_setHighsIntOptionValue.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_setHighsIntOptionValue(void *highs, const char *option, const HighsInt value)
     * }
     */
    public static long Highs_setHighsIntOptionValue(MemorySegment highs, MemorySegment option, long value) {
        var mh$ = Highs_setHighsIntOptionValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_setHighsIntOptionValue", highs, option, value);
            }
            return (long)mh$.invokeExact(highs, option, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_setHighsDoubleOptionValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_setHighsDoubleOptionValue");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_setHighsDoubleOptionValue(void *highs, const char *option, const double value)
     * }
     */
    public static FunctionDescriptor Highs_setHighsDoubleOptionValue$descriptor() {
        return Highs_setHighsDoubleOptionValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_setHighsDoubleOptionValue(void *highs, const char *option, const double value)
     * }
     */
    public static MethodHandle Highs_setHighsDoubleOptionValue$handle() {
        return Highs_setHighsDoubleOptionValue.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_setHighsDoubleOptionValue(void *highs, const char *option, const double value)
     * }
     */
    public static MemorySegment Highs_setHighsDoubleOptionValue$address() {
        return Highs_setHighsDoubleOptionValue.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_setHighsDoubleOptionValue(void *highs, const char *option, const double value)
     * }
     */
    public static long Highs_setHighsDoubleOptionValue(MemorySegment highs, MemorySegment option, double value) {
        var mh$ = Highs_setHighsDoubleOptionValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_setHighsDoubleOptionValue", highs, option, value);
            }
            return (long)mh$.invokeExact(highs, option, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_setHighsStringOptionValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_setHighsStringOptionValue");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_setHighsStringOptionValue(void *highs, const char *option, const char *value)
     * }
     */
    public static FunctionDescriptor Highs_setHighsStringOptionValue$descriptor() {
        return Highs_setHighsStringOptionValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_setHighsStringOptionValue(void *highs, const char *option, const char *value)
     * }
     */
    public static MethodHandle Highs_setHighsStringOptionValue$handle() {
        return Highs_setHighsStringOptionValue.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_setHighsStringOptionValue(void *highs, const char *option, const char *value)
     * }
     */
    public static MemorySegment Highs_setHighsStringOptionValue$address() {
        return Highs_setHighsStringOptionValue.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_setHighsStringOptionValue(void *highs, const char *option, const char *value)
     * }
     */
    public static long Highs_setHighsStringOptionValue(MemorySegment highs, MemorySegment option, MemorySegment value) {
        var mh$ = Highs_setHighsStringOptionValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_setHighsStringOptionValue", highs, option, value);
            }
            return (long)mh$.invokeExact(highs, option, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_setHighsOptionValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_setHighsOptionValue");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_setHighsOptionValue(void *highs, const char *option, const char *value)
     * }
     */
    public static FunctionDescriptor Highs_setHighsOptionValue$descriptor() {
        return Highs_setHighsOptionValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_setHighsOptionValue(void *highs, const char *option, const char *value)
     * }
     */
    public static MethodHandle Highs_setHighsOptionValue$handle() {
        return Highs_setHighsOptionValue.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_setHighsOptionValue(void *highs, const char *option, const char *value)
     * }
     */
    public static MemorySegment Highs_setHighsOptionValue$address() {
        return Highs_setHighsOptionValue.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_setHighsOptionValue(void *highs, const char *option, const char *value)
     * }
     */
    public static long Highs_setHighsOptionValue(MemorySegment highs, MemorySegment option, MemorySegment value) {
        var mh$ = Highs_setHighsOptionValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_setHighsOptionValue", highs, option, value);
            }
            return (long)mh$.invokeExact(highs, option, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getHighsBoolOptionValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getHighsBoolOptionValue");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getHighsBoolOptionValue(const void *highs, const char *option, HighsInt *value)
     * }
     */
    public static FunctionDescriptor Highs_getHighsBoolOptionValue$descriptor() {
        return Highs_getHighsBoolOptionValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getHighsBoolOptionValue(const void *highs, const char *option, HighsInt *value)
     * }
     */
    public static MethodHandle Highs_getHighsBoolOptionValue$handle() {
        return Highs_getHighsBoolOptionValue.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getHighsBoolOptionValue(const void *highs, const char *option, HighsInt *value)
     * }
     */
    public static MemorySegment Highs_getHighsBoolOptionValue$address() {
        return Highs_getHighsBoolOptionValue.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getHighsBoolOptionValue(const void *highs, const char *option, HighsInt *value)
     * }
     */
    public static long Highs_getHighsBoolOptionValue(MemorySegment highs, MemorySegment option, MemorySegment value) {
        var mh$ = Highs_getHighsBoolOptionValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getHighsBoolOptionValue", highs, option, value);
            }
            return (long)mh$.invokeExact(highs, option, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getHighsIntOptionValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getHighsIntOptionValue");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getHighsIntOptionValue(const void *highs, const char *option, HighsInt *value)
     * }
     */
    public static FunctionDescriptor Highs_getHighsIntOptionValue$descriptor() {
        return Highs_getHighsIntOptionValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getHighsIntOptionValue(const void *highs, const char *option, HighsInt *value)
     * }
     */
    public static MethodHandle Highs_getHighsIntOptionValue$handle() {
        return Highs_getHighsIntOptionValue.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getHighsIntOptionValue(const void *highs, const char *option, HighsInt *value)
     * }
     */
    public static MemorySegment Highs_getHighsIntOptionValue$address() {
        return Highs_getHighsIntOptionValue.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getHighsIntOptionValue(const void *highs, const char *option, HighsInt *value)
     * }
     */
    public static long Highs_getHighsIntOptionValue(MemorySegment highs, MemorySegment option, MemorySegment value) {
        var mh$ = Highs_getHighsIntOptionValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getHighsIntOptionValue", highs, option, value);
            }
            return (long)mh$.invokeExact(highs, option, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getHighsDoubleOptionValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getHighsDoubleOptionValue");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getHighsDoubleOptionValue(const void *highs, const char *option, double *value)
     * }
     */
    public static FunctionDescriptor Highs_getHighsDoubleOptionValue$descriptor() {
        return Highs_getHighsDoubleOptionValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getHighsDoubleOptionValue(const void *highs, const char *option, double *value)
     * }
     */
    public static MethodHandle Highs_getHighsDoubleOptionValue$handle() {
        return Highs_getHighsDoubleOptionValue.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getHighsDoubleOptionValue(const void *highs, const char *option, double *value)
     * }
     */
    public static MemorySegment Highs_getHighsDoubleOptionValue$address() {
        return Highs_getHighsDoubleOptionValue.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getHighsDoubleOptionValue(const void *highs, const char *option, double *value)
     * }
     */
    public static long Highs_getHighsDoubleOptionValue(MemorySegment highs, MemorySegment option, MemorySegment value) {
        var mh$ = Highs_getHighsDoubleOptionValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getHighsDoubleOptionValue", highs, option, value);
            }
            return (long)mh$.invokeExact(highs, option, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getHighsStringOptionValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getHighsStringOptionValue");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getHighsStringOptionValue(const void *highs, const char *option, char *value)
     * }
     */
    public static FunctionDescriptor Highs_getHighsStringOptionValue$descriptor() {
        return Highs_getHighsStringOptionValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getHighsStringOptionValue(const void *highs, const char *option, char *value)
     * }
     */
    public static MethodHandle Highs_getHighsStringOptionValue$handle() {
        return Highs_getHighsStringOptionValue.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getHighsStringOptionValue(const void *highs, const char *option, char *value)
     * }
     */
    public static MemorySegment Highs_getHighsStringOptionValue$address() {
        return Highs_getHighsStringOptionValue.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getHighsStringOptionValue(const void *highs, const char *option, char *value)
     * }
     */
    public static long Highs_getHighsStringOptionValue(MemorySegment highs, MemorySegment option, MemorySegment value) {
        var mh$ = Highs_getHighsStringOptionValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getHighsStringOptionValue", highs, option, value);
            }
            return (long)mh$.invokeExact(highs, option, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getHighsOptionType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getHighsOptionType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getHighsOptionType(const void *highs, const char *option, HighsInt *type)
     * }
     */
    public static FunctionDescriptor Highs_getHighsOptionType$descriptor() {
        return Highs_getHighsOptionType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getHighsOptionType(const void *highs, const char *option, HighsInt *type)
     * }
     */
    public static MethodHandle Highs_getHighsOptionType$handle() {
        return Highs_getHighsOptionType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getHighsOptionType(const void *highs, const char *option, HighsInt *type)
     * }
     */
    public static MemorySegment Highs_getHighsOptionType$address() {
        return Highs_getHighsOptionType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getHighsOptionType(const void *highs, const char *option, HighsInt *type)
     * }
     */
    public static long Highs_getHighsOptionType(MemorySegment highs, MemorySegment option, MemorySegment type) {
        var mh$ = Highs_getHighsOptionType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getHighsOptionType", highs, option, type);
            }
            return (long)mh$.invokeExact(highs, option, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_resetHighsOptions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_resetHighsOptions");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_resetHighsOptions(void *highs)
     * }
     */
    public static FunctionDescriptor Highs_resetHighsOptions$descriptor() {
        return Highs_resetHighsOptions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_resetHighsOptions(void *highs)
     * }
     */
    public static MethodHandle Highs_resetHighsOptions$handle() {
        return Highs_resetHighsOptions.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_resetHighsOptions(void *highs)
     * }
     */
    public static MemorySegment Highs_resetHighsOptions$address() {
        return Highs_resetHighsOptions.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_resetHighsOptions(void *highs)
     * }
     */
    public static long Highs_resetHighsOptions(MemorySegment highs) {
        var mh$ = Highs_resetHighsOptions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_resetHighsOptions", highs);
            }
            return (long)mh$.invokeExact(highs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getHighsIntInfoValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getHighsIntInfoValue");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getHighsIntInfoValue(const void *highs, const char *info, HighsInt *value)
     * }
     */
    public static FunctionDescriptor Highs_getHighsIntInfoValue$descriptor() {
        return Highs_getHighsIntInfoValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getHighsIntInfoValue(const void *highs, const char *info, HighsInt *value)
     * }
     */
    public static MethodHandle Highs_getHighsIntInfoValue$handle() {
        return Highs_getHighsIntInfoValue.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getHighsIntInfoValue(const void *highs, const char *info, HighsInt *value)
     * }
     */
    public static MemorySegment Highs_getHighsIntInfoValue$address() {
        return Highs_getHighsIntInfoValue.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getHighsIntInfoValue(const void *highs, const char *info, HighsInt *value)
     * }
     */
    public static long Highs_getHighsIntInfoValue(MemorySegment highs, MemorySegment info, MemorySegment value) {
        var mh$ = Highs_getHighsIntInfoValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getHighsIntInfoValue", highs, info, value);
            }
            return (long)mh$.invokeExact(highs, info, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getHighsDoubleInfoValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getHighsDoubleInfoValue");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getHighsDoubleInfoValue(const void *highs, const char *info, double *value)
     * }
     */
    public static FunctionDescriptor Highs_getHighsDoubleInfoValue$descriptor() {
        return Highs_getHighsDoubleInfoValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getHighsDoubleInfoValue(const void *highs, const char *info, double *value)
     * }
     */
    public static MethodHandle Highs_getHighsDoubleInfoValue$handle() {
        return Highs_getHighsDoubleInfoValue.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getHighsDoubleInfoValue(const void *highs, const char *info, double *value)
     * }
     */
    public static MemorySegment Highs_getHighsDoubleInfoValue$address() {
        return Highs_getHighsDoubleInfoValue.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getHighsDoubleInfoValue(const void *highs, const char *info, double *value)
     * }
     */
    public static long Highs_getHighsDoubleInfoValue(MemorySegment highs, MemorySegment info, MemorySegment value) {
        var mh$ = Highs_getHighsDoubleInfoValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getHighsDoubleInfoValue", highs, info, value);
            }
            return (long)mh$.invokeExact(highs, info, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getNumCols {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getNumCols");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getNumCols(const void *highs)
     * }
     */
    public static FunctionDescriptor Highs_getNumCols$descriptor() {
        return Highs_getNumCols.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getNumCols(const void *highs)
     * }
     */
    public static MethodHandle Highs_getNumCols$handle() {
        return Highs_getNumCols.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getNumCols(const void *highs)
     * }
     */
    public static MemorySegment Highs_getNumCols$address() {
        return Highs_getNumCols.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getNumCols(const void *highs)
     * }
     */
    public static long Highs_getNumCols(MemorySegment highs) {
        var mh$ = Highs_getNumCols.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getNumCols", highs);
            }
            return (long)mh$.invokeExact(highs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getNumRows {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getNumRows");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getNumRows(const void *highs)
     * }
     */
    public static FunctionDescriptor Highs_getNumRows$descriptor() {
        return Highs_getNumRows.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getNumRows(const void *highs)
     * }
     */
    public static MethodHandle Highs_getNumRows$handle() {
        return Highs_getNumRows.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getNumRows(const void *highs)
     * }
     */
    public static MemorySegment Highs_getNumRows$address() {
        return Highs_getNumRows.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getNumRows(const void *highs)
     * }
     */
    public static long Highs_getNumRows(MemorySegment highs) {
        var mh$ = Highs_getNumRows.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getNumRows", highs);
            }
            return (long)mh$.invokeExact(highs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getHighsInfinity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_DOUBLE,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getHighsInfinity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double Highs_getHighsInfinity(const void *highs)
     * }
     */
    public static FunctionDescriptor Highs_getHighsInfinity$descriptor() {
        return Highs_getHighsInfinity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double Highs_getHighsInfinity(const void *highs)
     * }
     */
    public static MethodHandle Highs_getHighsInfinity$handle() {
        return Highs_getHighsInfinity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double Highs_getHighsInfinity(const void *highs)
     * }
     */
    public static MemorySegment Highs_getHighsInfinity$address() {
        return Highs_getHighsInfinity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double Highs_getHighsInfinity(const void *highs)
     * }
     */
    public static double Highs_getHighsInfinity(MemorySegment highs) {
        var mh$ = Highs_getHighsInfinity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getHighsInfinity", highs);
            }
            return (double)mh$.invokeExact(highs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getHighsRunTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_DOUBLE,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getHighsRunTime");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double Highs_getHighsRunTime(const void *highs)
     * }
     */
    public static FunctionDescriptor Highs_getHighsRunTime$descriptor() {
        return Highs_getHighsRunTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double Highs_getHighsRunTime(const void *highs)
     * }
     */
    public static MethodHandle Highs_getHighsRunTime$handle() {
        return Highs_getHighsRunTime.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double Highs_getHighsRunTime(const void *highs)
     * }
     */
    public static MemorySegment Highs_getHighsRunTime$address() {
        return Highs_getHighsRunTime.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double Highs_getHighsRunTime(const void *highs)
     * }
     */
    public static double Highs_getHighsRunTime(MemorySegment highs) {
        var mh$ = Highs_getHighsRunTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getHighsRunTime", highs);
            }
            return (double)mh$.invokeExact(highs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_setOptionValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_setOptionValue");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_setOptionValue(void *highs, const char *option, const char *value)
     * }
     */
    public static FunctionDescriptor Highs_setOptionValue$descriptor() {
        return Highs_setOptionValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_setOptionValue(void *highs, const char *option, const char *value)
     * }
     */
    public static MethodHandle Highs_setOptionValue$handle() {
        return Highs_setOptionValue.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_setOptionValue(void *highs, const char *option, const char *value)
     * }
     */
    public static MemorySegment Highs_setOptionValue$address() {
        return Highs_setOptionValue.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_setOptionValue(void *highs, const char *option, const char *value)
     * }
     */
    public static long Highs_setOptionValue(MemorySegment highs, MemorySegment option, MemorySegment value) {
        var mh$ = Highs_setOptionValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_setOptionValue", highs, option, value);
            }
            return (long)mh$.invokeExact(highs, option, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Highs_getScaledModelStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            highs4j_c_api_h.C_LONG_LONG,
            highs4j_c_api_h.C_POINTER
        );

        public static final MemorySegment ADDR = highs4j_c_api_h.findOrThrow("Highs_getScaledModelStatus");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HighsInt Highs_getScaledModelStatus(const void *highs)
     * }
     */
    public static FunctionDescriptor Highs_getScaledModelStatus$descriptor() {
        return Highs_getScaledModelStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HighsInt Highs_getScaledModelStatus(const void *highs)
     * }
     */
    public static MethodHandle Highs_getScaledModelStatus$handle() {
        return Highs_getScaledModelStatus.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HighsInt Highs_getScaledModelStatus(const void *highs)
     * }
     */
    public static MemorySegment Highs_getScaledModelStatus$address() {
        return Highs_getScaledModelStatus.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HighsInt Highs_getScaledModelStatus(const void *highs)
     * }
     */
    public static long Highs_getScaledModelStatus(MemorySegment highs) {
        var mh$ = Highs_getScaledModelStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Highs_getScaledModelStatus", highs);
            }
            return (long)mh$.invokeExact(highs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final long K_HIGHS_MAXIMUM_STRING_LENGTH = 512L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_MAXIMUM_STRING_LENGTH 512
     * }
     */
    public static long K_HIGHS_MAXIMUM_STRING_LENGTH() {
        return K_HIGHS_MAXIMUM_STRING_LENGTH;
    }
    private static final long K_HIGHS_STATUS_ERROR = -1L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_STATUS_ERROR -1
     * }
     */
    public static long K_HIGHS_STATUS_ERROR() {
        return K_HIGHS_STATUS_ERROR;
    }
    private static final long K_HIGHS_STATUS_OK = 0L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_STATUS_OK 0
     * }
     */
    public static long K_HIGHS_STATUS_OK() {
        return K_HIGHS_STATUS_OK;
    }
    private static final long K_HIGHS_STATUS_WARNING = 1L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_STATUS_WARNING 1
     * }
     */
    public static long K_HIGHS_STATUS_WARNING() {
        return K_HIGHS_STATUS_WARNING;
    }
    private static final long K_HIGHS_VAR_TYPE_CONTINUOUS = 0L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_VAR_TYPE_CONTINUOUS 0
     * }
     */
    public static long K_HIGHS_VAR_TYPE_CONTINUOUS() {
        return K_HIGHS_VAR_TYPE_CONTINUOUS;
    }
    private static final long K_HIGHS_VAR_TYPE_INTEGER = 1L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_VAR_TYPE_INTEGER 1
     * }
     */
    public static long K_HIGHS_VAR_TYPE_INTEGER() {
        return K_HIGHS_VAR_TYPE_INTEGER;
    }
    private static final long K_HIGHS_VAR_TYPE_SEMI_CONTINUOUS = 2L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_VAR_TYPE_SEMI_CONTINUOUS 2
     * }
     */
    public static long K_HIGHS_VAR_TYPE_SEMI_CONTINUOUS() {
        return K_HIGHS_VAR_TYPE_SEMI_CONTINUOUS;
    }
    private static final long K_HIGHS_VAR_TYPE_SEMI_INTEGER = 3L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_VAR_TYPE_SEMI_INTEGER 3
     * }
     */
    public static long K_HIGHS_VAR_TYPE_SEMI_INTEGER() {
        return K_HIGHS_VAR_TYPE_SEMI_INTEGER;
    }
    private static final long K_HIGHS_VAR_TYPE_IMPLICIT_INTEGER = 4L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_VAR_TYPE_IMPLICIT_INTEGER 4
     * }
     */
    public static long K_HIGHS_VAR_TYPE_IMPLICIT_INTEGER() {
        return K_HIGHS_VAR_TYPE_IMPLICIT_INTEGER;
    }
    private static final long K_HIGHS_OPTION_TYPE_BOOL = 0L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_OPTION_TYPE_BOOL 0
     * }
     */
    public static long K_HIGHS_OPTION_TYPE_BOOL() {
        return K_HIGHS_OPTION_TYPE_BOOL;
    }
    private static final long K_HIGHS_OPTION_TYPE_INT = 1L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_OPTION_TYPE_INT 1
     * }
     */
    public static long K_HIGHS_OPTION_TYPE_INT() {
        return K_HIGHS_OPTION_TYPE_INT;
    }
    private static final long K_HIGHS_OPTION_TYPE_DOUBLE = 2L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_OPTION_TYPE_DOUBLE 2
     * }
     */
    public static long K_HIGHS_OPTION_TYPE_DOUBLE() {
        return K_HIGHS_OPTION_TYPE_DOUBLE;
    }
    private static final long K_HIGHS_OPTION_TYPE_STRING = 3L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_OPTION_TYPE_STRING 3
     * }
     */
    public static long K_HIGHS_OPTION_TYPE_STRING() {
        return K_HIGHS_OPTION_TYPE_STRING;
    }
    private static final long K_HIGHS_info_TYPE_INT64 = -1L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_info_TYPE_INT64 -1
     * }
     */
    public static long K_HIGHS_info_TYPE_INT64() {
        return K_HIGHS_info_TYPE_INT64;
    }
    private static final long K_HIGHS_info_TYPE_INT = 1L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_info_TYPE_INT 1
     * }
     */
    public static long K_HIGHS_info_TYPE_INT() {
        return K_HIGHS_info_TYPE_INT;
    }
    private static final long K_HIGHS_info_TYPE_DOUBLE = 2L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_info_TYPE_DOUBLE 2
     * }
     */
    public static long K_HIGHS_info_TYPE_DOUBLE() {
        return K_HIGHS_info_TYPE_DOUBLE;
    }
    private static final long K_HIGHS_OBJSENSE_MINIMIZE = 1L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_OBJSENSE_MINIMIZE 1
     * }
     */
    public static long K_HIGHS_OBJSENSE_MINIMIZE() {
        return K_HIGHS_OBJSENSE_MINIMIZE;
    }
    private static final long K_HIGHS_OBJSENSE_MAXIMIZE = -1L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_OBJSENSE_MAXIMIZE -1
     * }
     */
    public static long K_HIGHS_OBJSENSE_MAXIMIZE() {
        return K_HIGHS_OBJSENSE_MAXIMIZE;
    }
    private static final long K_HIGHS_MATRIX_FORMAT_COLWISE = 1L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_MATRIX_FORMAT_COLWISE 1
     * }
     */
    public static long K_HIGHS_MATRIX_FORMAT_COLWISE() {
        return K_HIGHS_MATRIX_FORMAT_COLWISE;
    }
    private static final long K_HIGHS_MATRIX_FORMAT_ROWWISE = 2L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_MATRIX_FORMAT_ROWWISE 2
     * }
     */
    public static long K_HIGHS_MATRIX_FORMAT_ROWWISE() {
        return K_HIGHS_MATRIX_FORMAT_ROWWISE;
    }
    private static final long K_HIGHS_HESSIAN_FORMAT_TRIANGULAR = 1L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_HESSIAN_FORMAT_TRIANGULAR 1
     * }
     */
    public static long K_HIGHS_HESSIAN_FORMAT_TRIANGULAR() {
        return K_HIGHS_HESSIAN_FORMAT_TRIANGULAR;
    }
    private static final long K_HIGHS_HESSIAN_FORMAT_SQUARE = 2L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_HESSIAN_FORMAT_SQUARE 2
     * }
     */
    public static long K_HIGHS_HESSIAN_FORMAT_SQUARE() {
        return K_HIGHS_HESSIAN_FORMAT_SQUARE;
    }
    private static final long K_HIGHS_SOLUTION_STATUS_NONE = 0L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_SOLUTION_STATUS_NONE 0
     * }
     */
    public static long K_HIGHS_SOLUTION_STATUS_NONE() {
        return K_HIGHS_SOLUTION_STATUS_NONE;
    }
    private static final long K_HIGHS_SOLUTION_STATUS_INFEASIBLE = 1L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_SOLUTION_STATUS_INFEASIBLE 1
     * }
     */
    public static long K_HIGHS_SOLUTION_STATUS_INFEASIBLE() {
        return K_HIGHS_SOLUTION_STATUS_INFEASIBLE;
    }
    private static final long K_HIGHS_SOLUTION_STATUS_FEASIBLE = 2L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_SOLUTION_STATUS_FEASIBLE 2
     * }
     */
    public static long K_HIGHS_SOLUTION_STATUS_FEASIBLE() {
        return K_HIGHS_SOLUTION_STATUS_FEASIBLE;
    }
    private static final long K_HIGHS_BASIS_VALIDITY_INVALID = 0L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_BASIS_VALIDITY_INVALID 0
     * }
     */
    public static long K_HIGHS_BASIS_VALIDITY_INVALID() {
        return K_HIGHS_BASIS_VALIDITY_INVALID;
    }
    private static final long K_HIGHS_BASIS_VALIDITY_VALID = 1L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_BASIS_VALIDITY_VALID 1
     * }
     */
    public static long K_HIGHS_BASIS_VALIDITY_VALID() {
        return K_HIGHS_BASIS_VALIDITY_VALID;
    }
    private static final long K_HIGHS_PRESOLVE_STATUS_NOT_PRESOLVED = -1L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_PRESOLVE_STATUS_NOT_PRESOLVED -1
     * }
     */
    public static long K_HIGHS_PRESOLVE_STATUS_NOT_PRESOLVED() {
        return K_HIGHS_PRESOLVE_STATUS_NOT_PRESOLVED;
    }
    private static final long K_HIGHS_PRESOLVE_STATUS_NOT_REDUCED = 0L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_PRESOLVE_STATUS_NOT_REDUCED 0
     * }
     */
    public static long K_HIGHS_PRESOLVE_STATUS_NOT_REDUCED() {
        return K_HIGHS_PRESOLVE_STATUS_NOT_REDUCED;
    }
    private static final long K_HIGHS_PRESOLVE_STATUS_INFEASIBLE = 1L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_PRESOLVE_STATUS_INFEASIBLE 1
     * }
     */
    public static long K_HIGHS_PRESOLVE_STATUS_INFEASIBLE() {
        return K_HIGHS_PRESOLVE_STATUS_INFEASIBLE;
    }
    private static final long K_HIGHS_PRESOLVE_STATUS_UNBOUNDED_OR_INFEASIBLE = 2L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_PRESOLVE_STATUS_UNBOUNDED_OR_INFEASIBLE 2
     * }
     */
    public static long K_HIGHS_PRESOLVE_STATUS_UNBOUNDED_OR_INFEASIBLE() {
        return K_HIGHS_PRESOLVE_STATUS_UNBOUNDED_OR_INFEASIBLE;
    }
    private static final long K_HIGHS_PRESOLVE_STATUS_REDUCED = 3L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_PRESOLVE_STATUS_REDUCED 3
     * }
     */
    public static long K_HIGHS_PRESOLVE_STATUS_REDUCED() {
        return K_HIGHS_PRESOLVE_STATUS_REDUCED;
    }
    private static final long K_HIGHS_PRESOLVE_STATUS_REDUCED_TO_EMPTY = 4L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_PRESOLVE_STATUS_REDUCED_TO_EMPTY 4
     * }
     */
    public static long K_HIGHS_PRESOLVE_STATUS_REDUCED_TO_EMPTY() {
        return K_HIGHS_PRESOLVE_STATUS_REDUCED_TO_EMPTY;
    }
    private static final long K_HIGHS_PRESOLVE_STATUS_TIMEOUT = 5L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_PRESOLVE_STATUS_TIMEOUT 5
     * }
     */
    public static long K_HIGHS_PRESOLVE_STATUS_TIMEOUT() {
        return K_HIGHS_PRESOLVE_STATUS_TIMEOUT;
    }
    private static final long K_HIGHS_PRESOLVE_STATUS_NULL_ERROR = 6L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_PRESOLVE_STATUS_NULL_ERROR 6
     * }
     */
    public static long K_HIGHS_PRESOLVE_STATUS_NULL_ERROR() {
        return K_HIGHS_PRESOLVE_STATUS_NULL_ERROR;
    }
    private static final long K_HIGHS_PRESOLVE_STATUS_OPTIONS_ERROR = 7L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_PRESOLVE_STATUS_OPTIONS_ERROR 7
     * }
     */
    public static long K_HIGHS_PRESOLVE_STATUS_OPTIONS_ERROR() {
        return K_HIGHS_PRESOLVE_STATUS_OPTIONS_ERROR;
    }
    private static final long K_HIGHS_PRESOLVE_STATUS_OUT_OF_MEMORY = 8L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_PRESOLVE_STATUS_OUT_OF_MEMORY 8
     * }
     */
    public static long K_HIGHS_PRESOLVE_STATUS_OUT_OF_MEMORY() {
        return K_HIGHS_PRESOLVE_STATUS_OUT_OF_MEMORY;
    }
    private static final long K_HIGHS_MODEL_STATUS_NOTSET = 0L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_MODEL_STATUS_NOTSET 0
     * }
     */
    public static long K_HIGHS_MODEL_STATUS_NOTSET() {
        return K_HIGHS_MODEL_STATUS_NOTSET;
    }
    private static final long K_HIGHS_MODEL_STATUS_LOAD_ERROR = 1L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_MODEL_STATUS_LOAD_ERROR 1
     * }
     */
    public static long K_HIGHS_MODEL_STATUS_LOAD_ERROR() {
        return K_HIGHS_MODEL_STATUS_LOAD_ERROR;
    }
    private static final long K_HIGHS_MODEL_STATUS_MODEL_ERROR = 2L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_MODEL_STATUS_MODEL_ERROR 2
     * }
     */
    public static long K_HIGHS_MODEL_STATUS_MODEL_ERROR() {
        return K_HIGHS_MODEL_STATUS_MODEL_ERROR;
    }
    private static final long K_HIGHS_MODEL_STATUS_PRESOLVE_ERROR = 3L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_MODEL_STATUS_PRESOLVE_ERROR 3
     * }
     */
    public static long K_HIGHS_MODEL_STATUS_PRESOLVE_ERROR() {
        return K_HIGHS_MODEL_STATUS_PRESOLVE_ERROR;
    }
    private static final long K_HIGHS_MODEL_STATUS_SOLVE_ERROR = 4L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_MODEL_STATUS_SOLVE_ERROR 4
     * }
     */
    public static long K_HIGHS_MODEL_STATUS_SOLVE_ERROR() {
        return K_HIGHS_MODEL_STATUS_SOLVE_ERROR;
    }
    private static final long K_HIGHS_MODEL_STATUS_POSTSOLVE_ERROR = 5L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_MODEL_STATUS_POSTSOLVE_ERROR 5
     * }
     */
    public static long K_HIGHS_MODEL_STATUS_POSTSOLVE_ERROR() {
        return K_HIGHS_MODEL_STATUS_POSTSOLVE_ERROR;
    }
    private static final long K_HIGHS_MODEL_STATUS_MODEL_EMPTY = 6L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_MODEL_STATUS_MODEL_EMPTY 6
     * }
     */
    public static long K_HIGHS_MODEL_STATUS_MODEL_EMPTY() {
        return K_HIGHS_MODEL_STATUS_MODEL_EMPTY;
    }
    private static final long K_HIGHS_MODEL_STATUS_OPTIMAL = 7L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_MODEL_STATUS_OPTIMAL 7
     * }
     */
    public static long K_HIGHS_MODEL_STATUS_OPTIMAL() {
        return K_HIGHS_MODEL_STATUS_OPTIMAL;
    }
    private static final long K_HIGHS_MODEL_STATUS_INFEASIBLE = 8L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_MODEL_STATUS_INFEASIBLE 8
     * }
     */
    public static long K_HIGHS_MODEL_STATUS_INFEASIBLE() {
        return K_HIGHS_MODEL_STATUS_INFEASIBLE;
    }
    private static final long K_HIGHS_MODEL_STATUS_UNBOUNDED_OR_INFEASIBLE = 9L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_MODEL_STATUS_UNBOUNDED_OR_INFEASIBLE 9
     * }
     */
    public static long K_HIGHS_MODEL_STATUS_UNBOUNDED_OR_INFEASIBLE() {
        return K_HIGHS_MODEL_STATUS_UNBOUNDED_OR_INFEASIBLE;
    }
    private static final long K_HIGHS_MODEL_STATUS_UNBOUNDED = 10L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_MODEL_STATUS_UNBOUNDED 10
     * }
     */
    public static long K_HIGHS_MODEL_STATUS_UNBOUNDED() {
        return K_HIGHS_MODEL_STATUS_UNBOUNDED;
    }
    private static final long K_HIGHS_MODEL_STATUS_OBJECTIVE_BOUND = 11L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_MODEL_STATUS_OBJECTIVE_BOUND 11
     * }
     */
    public static long K_HIGHS_MODEL_STATUS_OBJECTIVE_BOUND() {
        return K_HIGHS_MODEL_STATUS_OBJECTIVE_BOUND;
    }
    private static final long K_HIGHS_MODEL_STATUS_OBJECTIVE_TARGET = 12L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_MODEL_STATUS_OBJECTIVE_TARGET 12
     * }
     */
    public static long K_HIGHS_MODEL_STATUS_OBJECTIVE_TARGET() {
        return K_HIGHS_MODEL_STATUS_OBJECTIVE_TARGET;
    }
    private static final long K_HIGHS_MODEL_STATUS_TIME_LIMIT = 13L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_MODEL_STATUS_TIME_LIMIT 13
     * }
     */
    public static long K_HIGHS_MODEL_STATUS_TIME_LIMIT() {
        return K_HIGHS_MODEL_STATUS_TIME_LIMIT;
    }
    private static final long K_HIGHS_MODEL_STATUS_ITERATION_LIMIT = 14L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_MODEL_STATUS_ITERATION_LIMIT 14
     * }
     */
    public static long K_HIGHS_MODEL_STATUS_ITERATION_LIMIT() {
        return K_HIGHS_MODEL_STATUS_ITERATION_LIMIT;
    }
    private static final long K_HIGHS_MODEL_STATUS_UNKNOWN = 15L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_MODEL_STATUS_UNKNOWN 15
     * }
     */
    public static long K_HIGHS_MODEL_STATUS_UNKNOWN() {
        return K_HIGHS_MODEL_STATUS_UNKNOWN;
    }
    private static final long K_HIGHS_MODEL_STATUS_SOLUTION_LIMIT = 16L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_MODEL_STATUS_SOLUTION_LIMIT 16
     * }
     */
    public static long K_HIGHS_MODEL_STATUS_SOLUTION_LIMIT() {
        return K_HIGHS_MODEL_STATUS_SOLUTION_LIMIT;
    }
    private static final long K_HIGHS_MODEL_STATUS_INTERRUPT = 17L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_MODEL_STATUS_INTERRUPT 17
     * }
     */
    public static long K_HIGHS_MODEL_STATUS_INTERRUPT() {
        return K_HIGHS_MODEL_STATUS_INTERRUPT;
    }
    private static final long K_HIGHS_MODEL_STATUS_MEMORY_LIMIT = 18L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_MODEL_STATUS_MEMORY_LIMIT 18
     * }
     */
    public static long K_HIGHS_MODEL_STATUS_MEMORY_LIMIT() {
        return K_HIGHS_MODEL_STATUS_MEMORY_LIMIT;
    }
    private static final long K_HIGHS_BASIS_STATUS_LOWER = 0L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_BASIS_STATUS_LOWER 0
     * }
     */
    public static long K_HIGHS_BASIS_STATUS_LOWER() {
        return K_HIGHS_BASIS_STATUS_LOWER;
    }
    private static final long K_HIGHS_BASIS_STATUS_BASIC = 1L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_BASIS_STATUS_BASIC 1
     * }
     */
    public static long K_HIGHS_BASIS_STATUS_BASIC() {
        return K_HIGHS_BASIS_STATUS_BASIC;
    }
    private static final long K_HIGHS_BASIS_STATUS_UPPER = 2L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_BASIS_STATUS_UPPER 2
     * }
     */
    public static long K_HIGHS_BASIS_STATUS_UPPER() {
        return K_HIGHS_BASIS_STATUS_UPPER;
    }
    private static final long K_HIGHS_BASIS_STATUS_ZERO = 3L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_BASIS_STATUS_ZERO 3
     * }
     */
    public static long K_HIGHS_BASIS_STATUS_ZERO() {
        return K_HIGHS_BASIS_STATUS_ZERO;
    }
    private static final long K_HIGHS_BASIS_STATUS_NONBASIC = 4L;
    /**
     * {@snippet lang=c :
     * #define K_HIGHS_BASIS_STATUS_NONBASIC 4
     * }
     */
    public static long K_HIGHS_BASIS_STATUS_NONBASIC() {
        return K_HIGHS_BASIS_STATUS_NONBASIC;
    }
}

